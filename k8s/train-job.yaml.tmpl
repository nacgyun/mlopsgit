apiVersion: batch/v1
kind: Job
metadata:
  name: train-job
  namespace: __NAMESPACE__
spec:
  backoffLimit: 0
  template:
    spec:
      restartPolicy: Never

      # ✅ K8s 내부 도메인(svc.cluster.local) 해석 필요 → ClusterFirst(기본) 유지
      #    외부 DNS만 쓰지 않도록 nameservers 블록 제거
      dnsConfig:
        options:
          - name: ndots
            value: "1"
          - name: timeout
            value: "2"
          - name: attempts
            value: "2"

      # GHCR가 private이면 주석 해제하고 secret 이름 맞춰줘
      # imagePullSecrets:
      #   - name: ghcr-pull

      initContainers:
        - name: fetch-src
          image: alpine/git:2.45.2
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh","-lc"]
          args:
            - |
              set -euo pipefail
              echo "[fetch-src] start"
              GIT_URL="${GITHUB_TOKEN:+https://oauth2:${GITHUB_TOKEN}@github.com/__GITHUB_OWNER__/__GITHUB_REPO__.git}"
              GIT_URL="${GIT_URL:-https://github.com/__GITHUB_OWNER__/__GITHUB_REPO__.git}"
              SHA="__GIT_SHA__"

              # 네트워크 내성
              git config --global http.lowSpeedLimit 1000
              git config --global http.lowSpeedTime 20
              git config --global core.longpaths true

              mkdir -p /workspace && cd /workspace
              git init
              git remote add origin "$GIT_URL"

              # refs 먼저(가볍게), 실패 시 재시도
              for i in 1 2 3; do
                git fetch --filter=blob:none --no-tags origin \
                  '+refs/heads/*:refs/remotes/origin/*' '+refs/tags/*:refs/tags/*' && break
                echo "[fetch-src] refs fetch retry $i"; sleep 3
              done

              # 특정 SHA 직접 fetch (얕은복제 한계 회피)
              for i in 1 2 3; do
                git fetch origin "$SHA" && break
                echo "[fetch-src] sha fetch retry $i"; sleep 3
              done

              git checkout --detach "$SHA"
              echo "[fetch-src] checked out $SHA"
              ls -al
          env:
            - name: GITHUB_TOKEN
              valueFrom:
                secretKeyRef:
                  name: github-token
                  key: token
          volumeMounts:
            - name: workspace
              mountPath: /workspace

      containers:
        - name: trainer
          image: __IMAGE__
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh","-lc"]
          args:
            - |
              set -eux
              echo "[trainer] using SHA: ${GIT_SHA}"
              python ml/train.py
          env:
            - name: GIT_SHA
              value: "__GIT_SHA__"
            - name: MLFLOW_TRACKING_URI
              value: "http://mlflow.mlops.svc.cluster.local:5000"
            - name: MLFLOW_EXPERIMENT_NAME
              value: "iris-rf"
            - name: MLFLOW_S3_ENDPOINT_URL
              value: "http://minio.mlops.svc.cluster.local:9000"
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: minio
                  key: accesskey
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: minio
                  key: secretkey
          volumeMounts:
            - name: workspace
              mountPath: /opt/app

      volumes:
        - name: workspace
          emptyDir: {}

