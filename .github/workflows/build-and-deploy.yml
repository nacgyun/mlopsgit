name: Train with MLflow (Runtime image on demand, content-hash tagging)

on:
  workflow_dispatch:
  push:
    branches: [ master ]

jobs:
  train-build-run:
    runs-on: [self-hosted, k8s]

    env:
      NAMESPACE: mlops
      JOB_BASENAME: train-job
      IMAGE_RUNTIME: ghcr.io/nacgyun/mlopsgit:runtime
      GITHUB_OWNER: nacgyun
      GITHUB_REPO: mlopsgit

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install kubectl if missing
        run: |
          set -e
          if ! command -v kubectl >/dev/null 2>&1; then
            ARCH=$(uname -m); case "$ARCH" in x86_64) ARCH=amd64;; aarch64) ARCH=arm64;; esac
            curl -sSL -o kubectl "https://dl.k8s.io/release/$(curl -sSL https://dl.k8s.io/release/stable.txt)/bin/linux/${ARCH}/kubectl"
            chmod +x kubectl && sudo mv kubectl /usr/local/bin/kubectl
          fi
          kubectl version --client=true

      - name: Compute vars
        id: vars
        run: |
          set -euo pipefail
          echo "GIT_SHA=${GITHUB_SHA}" >> $GITHUB_ENV
          echo "SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-12)" >> $GITHUB_ENV
          echo "RUN_ID=${GITHUB_RUN_ID}" >> $GITHUB_ENV
          echo "BUILD_ID=${GITHUB_RUN_NUMBER}-${GITHUB_RUN_ATTEMPT}" >> $GITHUB_ENV
          # lowercase safe forms
          echo "OWNER_LC=$(echo "${GITHUB_OWNER:-$GITHUB_REPOSITORY_OWNER}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "REPO_LC=$(echo "${GITHUB_REPO:-${GITHUB_REPOSITORY#*/}}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "NS_LC=$(echo "${NAMESPACE}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "JOB_NAME=$(echo "${JOB_BASENAME}-${GITHUB_RUN_ID}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Detect changes for runtime image (ref only)
        id: changes
        uses: dorny/paths-filter@v3
        with:
          token: ${{ github.token }}
          filters: |
            runtime_image:
              - 'ml/requirements.txt'
              - 'Dockerfile.runtime'
              - 'Dockerfile'

      - name: Check runtime tag by BUILD_KEY
        id: tagcheck
        env:
          GHCR_PAT: ${{ secrets.GHCR_PAT }}      # read:packages 권장 (없으면 자동으로 github.token 사용)
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y >/dev/null 2>&1 || true
            sudo apt-get install -y jq >/dev/null 2>&1 || true
          fi

          OWNER="${GITHUB_OWNER:-nacgyun}"
          REPO="${GITHUB_REPO:-mlopsgit}"
          TOKEN="${GHCR_PAT:-$GITHUB_TOKEN}"

          if [ -f Dockerfile.runtime ] && [ -f ml/requirements.txt ]; then
            BUILD_KEY="$( (cat Dockerfile.runtime; echo; cat ml/requirements.txt) | sha256sum | awk '{print $1}')"
          elif [ -f Dockerfile.runtime ]; then
            BUILD_KEY="$(sha256sum Dockerfile.runtime | awk '{print $1}')"
          else
            BUILD_KEY=""
          fi
          echo "build_key=${BUILD_KEY}" >> "$GITHUB_OUTPUT"

          has_build_tag() {
            curl -fsSL -H "Authorization: Bearer ${TOKEN}" \
              "https://ghcr.io/v2/${OWNER}/${REPO}/tags/list" \
              | jq -e --arg t "runtime-${BUILD_KEY}" '.tags[]? | select(.==$t)' >/dev/null
          }

          NEED_BUILD=false
          if [ -z "${BUILD_KEY}" ]; then
            NEED_BUILD=true
          elif has_build_tag; then
            NEED_BUILD=false
          else
            NEED_BUILD=true
          fi
          echo "need_build=${NEED_BUILD}" >> "$GITHUB_OUTPUT"

      - name: Kaniko runtime-build (render → apply)
        if: steps.tagcheck.outputs.need_build == 'true' && steps.changes.outputs.runtime_image == 'true'
        env:
          KANIKO_JOB_NAME: kaniko-build-${{ github.run_id }}
        run: |
          set -euxo pipefail
          : "${KANIKO_JOB_NAME:?}"; : "${IMAGE_RUNTIME:?}"; : "${GIT_SHA:?}"; : "${NS_LC:?}"

          sed -e "s|__KANIKO_JOB_NAME__|${KANIKO_JOB_NAME}|g" \
              -e "s|__NAMESPACE__|${NS_LC}|g" \
              -e "s|__GITHUB_OWNER__|${OWNER_LC}|g" \
              -e "s|__GITHUB_REPO__|${REPO_LC}|g" \
              -e "s|__GIT_SHA__|${GIT_SHA}|g" \
              -e "s|__BUILD_KEY__|${{ steps.tagcheck.outputs.build_key }}|g" \
            k8s/kaniko-job.yaml.tmpl > /tmp/kaniko-job.yaml

          if grep -Eq '__(KANIKO_JOB_NAME|NAMESPACE|GITHUB_OWNER|GITHUB_REPO|GIT_SHA|BUILD_KEY)__' /tmp/kaniko-job.yaml; then
            echo "❌ placeholder left in kaniko-job.yaml"; sed -n '1,180p' /tmp/kaniko-job.yaml; exit 1
          fi

          kubectl -n "${NS_LC}" create --dry-run=client -f /tmp/kaniko-job.yaml -o yaml >/dev/null
          echo "----- rendered kaniko-job -----"; sed -n '1,200p' /tmp/kaniko-job.yaml

          kubectl -n "${NS_LC}" delete job "${KANIKO_JOB_NAME}" --ignore-not-found || true
          kubectl -n "${NS_LC}" apply -f /tmp/kaniko-job.yaml
          kubectl -n "${NS_LC}" wait --for=condition=complete --timeout=30m "job/${KANIKO_JOB_NAME}"

          POD=$(kubectl -n "${NS_LC}" get pod -l job-name="${KANIKO_JOB_NAME}" -o jsonpath='{.items[0].metadata.name}')
          kubectl -n "${NS_LC}" logs "$POD" -c kaniko --tail=-1 | egrep -i 'Pushing|Pushed|digest' || true

      - name: Compute IMAGE tag (prefer BUILD_KEY; fallback SHA)
        run: |
          set -e
          RKEY="${{ steps.tagcheck.outputs.build_key }}"
          if [ -z "$RKEY" ]; then RKEY="${GIT_SHA}"; fi
          echo "IMAGE_RUNTIME_KEY=${RKEY}" >> $GITHUB_ENV
          echo "IMAGE_RUNTIME_SHA=${IMAGE_RUNTIME}-${RKEY}" >> $GITHUB_ENV

      - name: Resolve GHCR digest for runtime image
        id: digest
        env:
          NS_LC: ${{ env.NS_LC }}
          IMAGE_RUNTIME: ${{ env.IMAGE_RUNTIME }}      # ghcr.io/<owner>/<repo>:runtime
          IMAGE_RUNTIME_KEY: ${{ env.IMAGE_RUNTIME_KEY }}  # build_key or sha
          OWNER_LC: ${{ env.OWNER_LC }}
          REPO_LC: ${{ env.REPO_LC }}
          KANIKO_JOB_NAME: kaniko-build-${{ github.run_id }}
          # 권장: read:packages scope PAT
          GHCR_PAT: ${{ secrets.GHCR_PAT }}
          # fallback: github.token (일부 상황에서 token 교환 없이 public만 접근 가능)
          GITHUB_TOKEN: ${{ github.token }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          set -euo pipefail

          IMAGE_BASE="${IMAGE_RUNTIME}"                  # ghcr.io/<owner>/<repo>:runtime
          RKEY="${IMAGE_RUNTIME_KEY}"                    # runtime-<RKEY>
          IMAGE_TAGGED="${IMAGE_BASE}-${RKEY}"           # ghcr.io/<o>/<r>:runtime-<RKEY>
          REPO_PATH="$(echo "${IMAGE_TAGGED#ghcr.io/}" | cut -d: -f1)"   # <owner>/<repo>
          TAG="$(echo "${IMAGE_TAGGED}" | cut -d: -f2)"                  # runtime-<RKEY>

          echo "[info] Resolving digest for ${IMAGE_TAGGED}"

          # -------- ① Try to parse from Kaniko logs (when we built just now) --------
          DIGEST_FROM_LOG=""
          if kubectl -n "${NS_LC}" get job "${KANIKO_JOB_NAME}" >/dev/null 2>&1; then
            POD=$(kubectl -n "${NS_LC}" get pod -l job-name="${KANIKO_JOB_NAME}" -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || true)
            if [ -n "${POD:-}" ]; then
              # Kaniko logs usually contain lines like: "digest: sha256:...."
              DIGEST_FROM_LOG="$(kubectl -n "${NS_LC}" logs "$POD" -c kaniko --tail=-1 2>/dev/null \
                | awk '/digest:[[:space:]]*sha256:/ {print $NF}' \
                | tail -n1 || true)"
            fi
          fi

          if [ -n "${DIGEST_FROM_LOG}" ]; then
            echo "[info] Got digest from Kaniko logs: ${DIGEST_FROM_LOG}"
            DIGEST="${DIGEST_FROM_LOG}"
          else
            echo "[info] Kaniko logs not available or no digest found. Falling back to Registry API."

            # -------- ② Use GHCR Registry v2 with proper token --------
            # Build a registry-scoped token. For private packages, authenticate to token service.
            # Public packages may work without auth.
            REG_TOKEN=""

            if [ -n "${GHCR_PAT:-}" ]; then
              # Use PAT via basic auth to get scoped registry token
              REG_TOKEN="$(curl -fsSL \
                -u "${GITHUB_ACTOR}:${GHCR_PAT}" \
                "https://ghcr.io/token?service=ghcr.io&scope=repository:${REPO_PATH}:pull" \
                | jq -r '.token')"
            else
              # Try without creds (public) or with GITHUB_TOKEN (some orgs allow)
              REG_TOKEN="$(curl -fsSL \
                -H "Authorization: Bearer ${GITHUB_TOKEN}" \
                "https://ghcr.io/token?service=ghcr.io&scope=repository:${REPO_PATH}:pull" \
                | jq -r '.token' || true)"
              if [ -z "${REG_TOKEN}" ] || [ "${REG_TOKEN}" = "null" ]; then
                # Last resort: anonymous (public only)
                REG_TOKEN="$(curl -fsSL \
                  "https://ghcr.io/token?service=ghcr.io&scope=repository:${REPO_PATH}:pull" \
                  | jq -r '.token' || true)"
              fi
            fi

            if [ -z "${REG_TOKEN}" ] || [ "${REG_TOKEN}" = "null" ]; then
              echo "❌ Failed to obtain GHCR registry token. Provide GHCR_PAT with read:packages."
              exit 1
            fi

            # Accept multiple manifest media types (single/manifest-list/OCI)
            ACCEPT_HEADER="application/vnd.oci.image.index.v1+json, application/vnd.docker.distribution.manifest.list.v2+json, application/vnd.oci.image.manifest.v1+json, application/vnd.docker.distribution.manifest.v2+json"

            # HEAD may be blocked by some CDNs; use GET and read headers
            HDRS="$(mktemp)"
            curl -fsSL -D "${HDRS}" -o /dev/null \
              -H "Authorization: Bearer ${REG_TOKEN}" \
              -H "Accept: ${ACCEPT_HEADER}" \
              "https://ghcr.io/v2/${REPO_PATH}/manifests/${TAG}"

            DIGEST="$(awk -F': ' 'tolower($1)=="docker-content-digest"{gsub(/\r/,"");print $2}' "${HDRS}" | tail -n1)"

            if [ -z "${DIGEST}" ]; then
              echo "❌ Docker-Content-Digest header not present. Manifest may be non-V2 or tag missing."
              echo "   Repo path: ${REPO_PATH}  Tag: ${TAG}"
              echo "   Response headers:"; sed -n '1,200p' "${HDRS}" || true
              exit 1
            fi
          fi

          IMAGE_REF="ghcr.io/${REPO_PATH}@${DIGEST}"
          echo "[ok] Resolved ref: ${IMAGE_REF}"

          {
            echo "GHCR_IMAGE=ghcr.io/${REPO_PATH}"
            echo "GHCR_TAG=${TAG}"
            echo "GHCR_DIGEST=${DIGEST}"
            echo "GHCR_IMAGE_REF=${IMAGE_REF}"
          } >> "$GITHUB_ENV"

      - name: Render Train Job manifest
        run: |
          set -euo pipefail
          sed -e "s|__JOB_NAME__|${JOB_NAME}|g" \
              -e "s|__NAMESPACE__|${NS_LC}|g" \
              -e "s|__RUN_ID__|${RUN_ID}|g" \
              -e "s|__BUILD_ID__|${BUILD_ID}|g" \
              -e "s|__GIT_SHA__|${GIT_SHA}|g" \
              -e "s|__IMAGE__|${IMAGE_RUNTIME_SHA}|g" \
              -e "s|__GITHUB_OWNER__|${OWNER_LC}|g" \
              -e "s|__GITHUB_REPO__|${REPO_LC}|g" \
              -e "s|__GHCR_IMAGE__|${GHCR_IMAGE}|g" \
              -e "s|__GHCR_TAG__|${GHCR_TAG}|g" \
              -e "s|__GHCR_DIGEST__|${GHCR_DIGEST}|g" \
              -e "s|__GHCR_IMAGE_REF__|${GHCR_IMAGE_REF}|g" \
            k8s/train-job.yaml.tmpl > /tmp/train-job.yaml

          # 치환 누락 검증 (남아있으면 실패)
          if grep -qE "__[A-Z0-9_]+__" /tmp/train-job.yaml; then
            echo "❌ placeholder left in train-job.yaml"
            grep -nE "__[A-Z0-9_]+__" /tmp/train-job.yaml || true
            exit 1
          fi

          # RFC1123 이름 검증
          echo "${JOB_NAME}" | grep -qE '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$' || { echo "❌ invalid JOB_NAME=${JOB_NAME}"; exit 1; }

          echo "----- rendered train-job -----"; sed -n '1,240p' /tmp/train-job.yaml

      - name: Apply Train Job
        run: |
          set -euo pipefail
          kubectl -n "${NS_LC}" delete job "${JOB_NAME}" --ignore-not-found --wait=true || true
          kubectl -n "${NS_LC}" apply -f /tmp/train-job.yaml
          kubectl -n "${NS_LC}" get pods -l job-name="${JOB_NAME}" -o wide || true

      - name: Wait Train → logs
        run: |
          set -euo pipefail
          kubectl -n "${NS_LC}" wait --for=condition=complete --timeout=60m job/${JOB_NAME}
          POD=$(kubectl -n "${NS_LC}" get pod -l job-name="${JOB_NAME}" -o jsonpath='{.items[0].metadata.name}')
          # 실시간 로그가 보이도록 템플릿에서 python -u / PYTHONUNBUFFERED=1 적용되어 있어야 함
          kubectl -n "${NS_LC}" logs "$POD" -c trainer --tail=300 || true
          kubectl -n "${NS_LC}" logs "$POD" -c fetch-src --tail=100 || true

      - name: On failure dump diagnostics
        if: failure()
        run: |
          set -euo pipefail
          POD=$(kubectl -n "${NS_LC}" get pod -l job-name="${JOB_NAME}" -o jsonpath='{.items[0].metadata.name}')
          echo "---- describe job ----"
          kubectl -n "${NS_LC}" describe job "${JOB_NAME}" || true
          echo "---- describe pod ----"
          kubectl -n "${NS_LC}" describe pod "${POD}" || true
          echo "---- init logs ----"
          kubectl -n "${NS_LC}" logs "${POD}" -c fetch-src --tail=200 || true
          echo "---- trainer logs ----"
          kubectl -n "${NS_LC}" logs "${POD}" -c trainer --tail=500 || true

