name: Train with MLflow + Build & Push (Kaniko)

on:
  push:
    branches: [ "master", "main" ]
  workflow_dispatch:

permissions:
  contents: read

env:
  NAMESPACE: mlops
  REGISTRY: ghcr.io
  IMAGE_REPO: nacgyun/mlopsgit
  APP_IMAGE: ghcr.io/nacgyun/mlopsgit
  # >>> 템플릿 실제 위치로 맞춰라. 파일이 repo 루트면 "." 로 바꿔.
  K8S_DIR: k8s

jobs:
  train-build:
    runs-on: self-hosted
    timeout-minutes: 45

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install kubectl (in-runner)
        run: |
          set -e
          mkdir -p "$HOME/bin"
          curl -fsSL -o "$HOME/bin/kubectl" \
            "https://dl.k8s.io/release/$(curl -fsSL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x "$HOME/bin/kubectl"
          echo "$HOME/bin" >> "$GITHUB_PATH"
          kubectl version --client

      - name: K8s auth quick check
        run: |
          kubectl get ns >/dev/null
          kubectl -n kube-system get pods | head -n3

      - name: Set image tag
        run: |
          echo "TAG=${GITHUB_SHA}" >> "$GITHUB_ENV"
          echo "IMAGE=${APP_IMAGE}:${GITHUB_SHA}" >> "$GITHUB_ENV"

      # ---------- (A) Kaniko Build & Push ----------
      - name: Render & apply Kaniko Job
        run: |
          test -f "${K8S_DIR}/kaniko-build.yaml.tmpl" || { echo "::error file not found::${K8S_DIR}/kaniko-build.yaml.tmpl"; exit 1; }
          sed "s|__IMAGE__|${IMAGE}|g" "${K8S_DIR}/kaniko-build.yaml.tmpl" \
          | kubectl -n "${NAMESPACE}" apply -f -

      - name: Wait Kaniko pod name
        id: kaniko
        shell: bash
        run: |
          for i in {1..60}; do
            POD=$(kubectl -n "${NAMESPACE}" get pod -l job-name=kaniko-build \
              -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || true)
            [[ -n "$POD" ]] && echo "pod=$POD" >> "$GITHUB_OUTPUT" && break
            sleep 2
          done
          [[ -z "$POD" ]] && { echo "::error::kaniko pod not found"; exit 1; }

      - name: Copy source into /workspace & release init
        run: |
          POD="${{ steps.kaniko.outputs.pod }}"
          kubectl -n "${NAMESPACE}" cp . "${POD}:/workspace" -c fetch-src
          kubectl -n "${NAMESPACE}" exec -c fetch-src "${POD}" -- sh -lc 'touch /workspace/.ready'

      - name: Stream Kaniko logs
        run: kubectl -n "${NAMESPACE}" logs -f job/kaniko-build -c kaniko

      - name: Wait Kaniko Job complete
        run: kubectl -n "${NAMESPACE}" wait --for=condition=complete --timeout=20m job/kaniko-build

      # ---------- (B) Train Job on the just-built image ----------
      - name: Render & apply Train Job
        run: |
          test -f "${K8S_DIR}/train-job.yaml.tmpl" || { echo "::error file not found::${K8S_DIR}/train-job.yaml.tmpl"; exit 1; }
          sed \
            -e "s|__IMAGE__|${IMAGE}|g" \
            -e "s|__MLFLOW_URI__|http://mlflow.mlops.svc.cluster.local:5000|g" \
            -e "s|__MODEL_NAME__|light-logreg|g" \
            "${K8S_DIR}/train-job.yaml.tmpl" \
          | kubectl -n "${NAMESPACE}" apply -f -

      - name: Wait Train pod name
        id: train
        shell: bash
        run: |
          for i in {1..60}; do
            TPOD=$(kubectl -n "${NAMESPACE}" get pod -l job-name=train-run \
              -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || true)
            [[ -n "$TPOD" ]] && echo "pod=$TPOD" >> "$GITHUB_OUTPUT" && break
            sleep 2
          done
          [[ -z "$TPOD" ]] && { echo "::error::train pod not found"; exit 1; }

      - name: Stream Train logs
        run: kubectl -n "${NAMESPACE}" logs -f job/train-run

      - name: Wait Train Job complete
        run: kubectl -n "${NAMESPACE}" wait --for=condition=complete --timeout=20m job/train-run

      # ---------- (C) Cleanup ----------
      - name: Cleanup (always)
        if: always()
        run: |
          kubectl -n "${NAMESPACE}" delete job kaniko-build --ignore-not-found
          kubectl -n "${NAMESPACE}" delete job train-run   --ignore-not-found

      # ---------- (D) On failure dump ----------
      - name: Dump on failure
        if: failure()
        run: |
          echo '--- Kaniko ---'
          kubectl -n "${NAMESPACE}" get pods -l job-name=kaniko-build -o wide || true
          kubectl -n "${NAMESPACE}" describe job/kaniko-build || true
          kubectl -n "${NAMESPACE}" logs job/kaniko-build --all-containers --tail=-1 || true
          echo '--- Train ---'
          kubectl -n "${NAMESPACE}" get pods -l job-name=train-run -o wide || true
          kubectl -n "${NAMESPACE}" describe job/train-run || true
          kubectl -n "${NAMESPACE}" logs job/train-run --all-containers --tail=-1 || true

