name: Build & Deploy ML Train Job

on:
  push:
    paths:
      - "ml/**"
      - "job.yaml"
      - ".github/workflows/build-and-deploy.yml"
  workflow_dispatch:

permissions:
  contents: read
  packages: write

concurrency:
  group: build-deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_BASE: ghcr.io/nacgyun/mlflow-train
  NAMESPACE: mlops
  JOB_NAME: mlflow-train-job

jobs:
  build-and-deploy:
    runs-on: [self-hosted, linux, x64]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}   # packages:write 권한 필요

      - name: Build & Push (with registry cache)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ml/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_BASE }}:${{ github.sha }}
            ${{ env.IMAGE_BASE }}:latest
          cache-from: type=registry,ref=${{ env.IMAGE_BASE }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_BASE }}:buildcache,mode=max

      - name: Set image tag env
        run: |
          echo "IMAGE_SHA=${IMAGE_BASE}:${GITHUB_SHA}" >> "$GITHUB_ENV"

      - name: Show kubectl context (debug)
        run: |
          kubectl version --short || true
          kubectl get ns || true
          kubectl -n "${NAMESPACE}" get svc || true

      - name: Deploy Job (delete → apply with image SHA)
        run: |
          set -euo pipefail
          kubectl -n "${NAMESPACE}" delete job "${JOB_NAME}" --ignore-not-found
          # __IMAGE__ 자리표시자를 SHA 태그로 치환해서 적용
          sed "s|__IMAGE__|${IMAGE_SHA}|g" job.yaml | kubectl -n "${NAMESPACE}" apply -f -

      - name: Wait for completion & show logs
        run: |
          set -euo pipefail
          kubectl -n "${NAMESPACE}" wait --for=condition=complete job/"${JOB_NAME}" --timeout=900s || {
            echo "== Describe Job =="; kubectl -n "${NAMESPACE}" describe job "${JOB_NAME}" || true
            echo "== Pods =="; kubectl -n "${NAMESPACE}" get pods -l job-name="${JOB_NAME}" -o wide || true
            echo "== Pod Describes =="; for p in $(kubectl -n "${NAMESPACE}" get pods -l job-name="${JOB_NAME}" -o jsonpath='{.items[*].metadata.name}'); do kubectl -n "${NAMESPACE}" describe pod "$p" || true; done
            echo "== Pod Logs =="; kubectl -n "${NAMESPACE}" logs job/"${JOB_NAME}" --all-containers=true --tail=-1 || true
            exit 1
          }
          kubectl -n "${NAMESPACE}" logs job/"${JOB_NAME}" --all-containers=true --tail=200

