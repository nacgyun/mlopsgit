name: Train with MLflow (Runtime image on demand, always retrain from git)

on:
  workflow_dispatch:
  push:
    branches: [ master ]

jobs:
  train-build-run:
    runs-on: [self-hosted, k8s]

    env:
      NAMESPACE: mlops
      TRAIN_JOB_NAME: train-job
      IMAGE_RUNTIME: ghcr.io/nacgyun/mlopsgit:runtime

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install kubectl if missing
        run: |
          set -e
          if ! command -v kubectl >/dev/null 2>&1; then
            ARCH=$(uname -m); case "$ARCH" in x86_64) ARCH=amd64;; aarch64) ARCH=arm64;; esac
            curl -sSL -o kubectl "https://dl.k8s.io/release/$(curl -sSL https://dl.k8s.io/release/stable.txt)/bin/linux/${ARCH}/kubectl"
            chmod +x kubectl && sudo mv kubectl /usr/local/bin/kubectl
          fi
          kubectl version --client=true

      - name: Get vars
        id: vars
        run: |
          set -e
          echo "GIT_SHA=${GITHUB_SHA}" >> $GITHUB_ENV
          echo "SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-12)" >> $GITHUB_ENV

      # requirements.txt / Dockerfile.runtime / Dockerfile 변경 시에만 Kaniko 실행
      - name: Detect changes for runtime image
        id: changes
        uses: dorny/paths-filter@v3
        with:
          token: ${{ github.token }}
          filters: |
            runtime_image:
              - 'ml/requirements.txt'
              - 'Dockerfile.runtime'
              - 'Dockerfile'

      # ---- Kaniko: 템플릿 렌더 → 검증 → apply ----
      - name: Kaniko runtime-build (render from template → apply)
        if: steps.changes.outputs.runtime_image == 'true'
        env:
          KANIKO_JOB_NAME: kaniko-build-${{ github.run_id }}
        run: |
          set -euxo pipefail
          : "${KANIKO_JOB_NAME:?}"; : "${IMAGE_RUNTIME:?}"; : "${GIT_SHA:?}"; : "${NAMESPACE:?}"

          # 1) 템플릿 치환 → 렌더 파일
          sed -e "s|__KANIKO_JOB_NAME__|${KANIKO_JOB_NAME}|g" \
              -e "s|__IMAGE__|${IMAGE_RUNTIME}|g" \
              -e "s|__DOCKERFILE__|/workspace/Dockerfile.runtime|g" \
              -e "s|__GIT_SHA__|${GIT_SHA}|g" \
            k8s/kaniko-job.yaml.tmpl > /tmp/kaniko-job.yaml

          echo "----- rendered kaniko-job -----"
          cat /tmp/kaniko-job.yaml

          # 2) 플레이스홀더 가드
          if grep -E "__KANIKO_JOB_NAME__|__IMAGE__|__DOCKERFILE__|__GIT_SHA__" /tmp/kaniko-job.yaml; then
            echo "❌ placeholder left in manifest"; exit 1
          fi

          # 3) 같은 이름 job 있으면 삭제 후 적용
          kubectl -n "${NAMESPACE}" delete job "${KANIKO_JOB_NAME}" --ignore-not-found || true
          kubectl -n "${NAMESPACE}" apply -f /tmp/kaniko-job.yaml
          kubectl -n "${NAMESPACE}" wait --for=condition=complete --timeout=30m job/${KANIKO_JOB_NAME}
          POD=$(kubectl -n "${NAMESPACE}" get pod -l job-name="${KANIKO_JOB_NAME}" -o jsonpath='{.items[0].metadata.name}')
          kubectl -n "${NAMESPACE}" logs "$POD" --tail=300 || true

      # ---- Train Job: 항상 최신 git으로 재학습 ----
      - name: Render Train Job manifest
        run: |
          set -e
          sed -e "s|__IMAGE__|${IMAGE_RUNTIME}|g" \
              -e "s|__GIT_SHA__|${GIT_SHA}|g" \
            k8s/train-job.yaml.tmpl > /tmp/train-job.yaml
          echo "----- rendered train-job -----"
          cat /tmp/train-job.yaml

      - name: Apply Train Job
        run: |
          set -e
          kubectl -n "${NAMESPACE}" delete job "${TRAIN_JOB_NAME}" --ignore-not-found || true
          kubectl -n "${NAMESPACE}" apply -f /tmp/train-job.yaml
          kubectl -n "${NAMESPACE}" get pods -l job-name="${TRAIN_JOB_NAME}" -o wide

      - name: Wait Train → logs
        run: |
          set -e
          kubectl -n "${NAMESPACE}" wait --for=condition=complete --timeout=60m job/${TRAIN_JOB_NAME}
          POD=$(kubectl -n "${NAMESPACE}" get pod -l job-name="${TRAIN_JOB_NAME}" -o jsonpath='{.items[0].metadata.name}')
          kubectl -n "${NAMESPACE}" logs "$POD" --tail=300 || true

