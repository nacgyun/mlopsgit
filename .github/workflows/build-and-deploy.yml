name: build-and-deploy
on:
  push:
    branches: ["master"]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  NAMESPACE: mlops
  APP_NAME: myapp
  IMAGE_REPO: ghcr.io/${{ github.repository }}
  IMAGE_TAG: ${{ github.sha }}
  IMAGE: ghcr.io/${{ github.repository }}:${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      # 1) kubectl 설치 (PATH는 다음 스텝부터 반영)
      - name: Install kubectl (no-sudo)
        run: |
          set -e
          ver=$(curl -Ls https://dl.k8s.io/release/stable.txt)
          curl -Ls -o "$RUNNER_TEMP/kubectl" "https://dl.k8s.io/release/${ver}/bin/linux/amd64/kubectl"
          chmod +x "$RUNNER_TEMP/kubectl"
          echo "$RUNNER_TEMP" >> "$GITHUB_PATH"

      # 2) kubeconfig 주입 + 기본 확인
      - name: Configure kube access & verify
        run: |
          set -e
          echo "${{ secrets.KUBECONFIG }}" > "$RUNNER_TEMP/kubeconfig"
          echo "KUBECONFIG=$RUNNER_TEMP/kubeconfig" >> "$GITHUB_ENV"
          kubectl version --client
          kubectl get ns || true

      # 3) 네임스페이스 없으면 생성
      - name: Ensure namespace exists
        run: |
          kubectl get ns "$NAMESPACE" || kubectl create ns "$NAMESPACE"

      # 4) GHCR 푸시용 도커 시크릿 (Kaniko가 /kaniko/.docker/config.json 사용)
      - name: Ensure GHCR docker secret
        run: |
          kubectl -n "$NAMESPACE" create secret docker-registry ghcr-creds \
            --docker-server=ghcr.io \
            --docker-username="${{ github.actor }}" \
            --docker-password="${{ secrets.GITHUB_TOKEN }}" \
            --docker-email="ci@example.local" \
            --dry-run=client -o yaml | kubectl apply -f -

      # 5) 이전 Kaniko Job 정리
      - name: Cleanup previous Kaniko Job
        run: |
          kubectl -n "$NAMESPACE" delete job kaniko-build --ignore-not-found=true

      # 6) Kaniko Job 실행 (initContainer: 소스 아카이브 다운로드 → /workspace 에 압축 해제)
      - name: Launch Kaniko Job
        env:
          REPO: ${{ github.repository }}   # owner/repo
          REV:  ${{ github.sha }}          # commit sha
        run: |
          cat <<EOF | kubectl -n "$NAMESPACE" apply -f -
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: kaniko-build
          spec:
            backoffLimit: 0
            template:
              spec:
                restartPolicy: Never
                initContainers:
                  - name: fetch-src
                    image: alpine:3.20
                    env:
                      - name: REPO
                        value: "${REPO}"
                      - name: REV
                        value: "${REV}"
                      - name: GITHUB_TOKEN
                        value: "${{ secrets.GITHUB_TOKEN }}"
                    command: ["/bin/sh","-lc"]
                    args:
                      - |
                        set -e
                        apk add --no-cache curl tar
                        mkdir -p /workspace
                        # GitHub API 아카이브 다운로드 (private repo 지원, 토큰 헤더)
                        echo ">> downloading source archive ..."
                        curl -Ls -H "Authorization: Bearer ${GITHUB_TOKEN}" \
                          -o /tmp/src.tgz "https://api.github.com/repos/${REPO}/tarball/${REV}"
                        echo ">> extracting ..."
                        tar -xzf /tmp/src.tgz -C /workspace --strip-components=1
                        ls -lah /workspace | head -n 50
                    volumeMounts:
                      - name: workspace
                        mountPath: /workspace
                containers:
                  - name: kaniko
                    image: gcr.io/kaniko-project/executor:latest
                    args:
                      - --context=/workspace
                      - --dockerfile=/workspace/Dockerfile
                      - --destination=${IMAGE}
                      # 캐시 활성화 원하면 아래 2줄 주석 해제
                      # - --cache=true
                      # - --cache-repo=${IMAGE_REPO}-cache
                    volumeMounts:
                      - name: docker-config
                        mountPath: /kaniko/.docker/
                      - name: workspace
                        mountPath: /workspace
                volumes:
                  - name: docker-config
                    secret:
                      secretName: ghcr-creds
                      items:
                        - key: .dockerconfigjson
                          path: config.json
                  - name: workspace
                    emptyDir: {}
          EOF

      # 7) Kaniko 완료 대기 + 로그 출력
      - name: Wait for Kaniko build to finish
        run: |
          set -e
          kubectl -n "$NAMESPACE" wait --for=condition=Complete job/kaniko-build --timeout=20m
          POD=$(kubectl -n "$NAMESPACE" get pods -l job-name=kaniko-build -o jsonpath='{.items[0].metadata.name}')
          echo "== Kaniko Logs =="
          kubectl -n "$NAMESPACE" logs "$POD"

      # 8) 배포 적용 및 이미지 태그 갱신
      - name: Set image and rollout
        run: |
          set -e
          kubectl -n "$NAMESPACE" apply -f k8s/deploy.yaml
          kubectl -n "$NAMESPACE" set image deploy/${APP_NAME} ${APP_NAME}=${IMAGE} --record
          kubectl -n "$NAMESPACE" rollout status deploy/${APP_NAME} --timeout=5m

