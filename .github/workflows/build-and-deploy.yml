name: Train with MLflow (Runtime image on demand, always retrain from git)

on:
  workflow_dispatch:
  push:
    branches: [ master ]

jobs:
  train-build-run:
    runs-on: [self-hosted, k8s]

    env:
      NAMESPACE: mlops
      # 런타임 이미지는 코드 없이 의존성만 담긴 고정 태그(:runtime)
      IMAGE_RUNTIME: ghcr.io/${{ github.repository }}:runtime
      # 잡 이름
      KANIKO_JOB_NAME: kaniko-runtime-build
      TRAIN_JOB_NAME: train-job

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install kubectl if missing
        run: |
          set -e
          if ! command -v kubectl >/dev/null 2>&1; then
            ARCH=$(uname -m); case "$ARCH" in x86_64) ARCH=amd64;; aarch64) ARCH=arm64;; esac
            curl -sSL -o kubectl "https://dl.k8s.io/release/$(curl -sSL https://dl.k8s.io/release/stable.txt)/bin/linux/${ARCH}/kubectl"
            chmod +x kubectl && sudo mv kubectl /usr/local/bin/kubectl
          fi
          kubectl version --client=true

      - name: Set variables
        run: |
          echo "GIT_SHA=${GITHUB_SHA}" >> $GITHUB_ENV
          echo "SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-12)" >> $GITHUB_ENV
          echo "REPO=${GITHUB_REPOSITORY}" >> $GITHUB_ENV
          echo "NAMESPACE=$NAMESPACE  IMAGE_RUNTIME=$IMAGE_RUNTIME"

      # 런타임 이미지가 필요한 변경인지 탐지 (의존성/베이스 바뀔 때만 빌드)
      - name: Detect changes for runtime image
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            runtime_image:
              - 'Dockerfile.runtime'
              - 'ml/requirements.txt'

      # Kaniko Job 매니페스트 렌더 (런타임 이미지용)
      - name: Render Kaniko runtime-build Job
        if: steps.changes.outputs.runtime_image == 'true'
        run: |
          set -e
          # 템플릿이 __IMAGE__ (목표 태그) 와 __DOCKERFILE__ (빌드할 Dockerfile 경로)을 받도록 가정
          sed -e "s|__IMAGE__|${IMAGE_RUNTIME}|g" \
              -e "s|__DOCKERFILE__|/workspace/Dockerfile.runtime|g" \
              k8s/kaniko-job.yaml.tmpl > k8s/kaniko-job.runtime.yaml
          echo "----- k8s/kaniko-job.runtime.yaml -----"
          cat k8s/kaniko-job.runtime.yaml

      - name: Cleanup previous Kaniko runtime job
        if: steps.changes.outputs.runtime_image == 'true'
        run: |
          kubectl -n "$NAMESPACE" delete job "$KANIKO_JOB_NAME" --ignore-not-found

      - name: Apply Kaniko runtime-build Job
        if: steps.changes.outputs.runtime_image == 'true'
        run: |
          kubectl -n "$NAMESPACE" apply -f k8s/kaniko-job.runtime.yaml
          kubectl -n "$NAMESPACE" get pods -l job-name="$KANIKO_JOB_NAME" -o wide

      - name: Wait Kaniko runtime-build → logs
        if: steps.changes.outputs.runtime_image == 'true'
        run: |
          set -e
          kubectl -n "$NAMESPACE" wait --for=condition=complete --timeout=30m job/${KANIKO_JOB_NAME}
          POD=$(kubectl -n "$NAMESPACE" get pod -l job-name="${KANIKO_JOB_NAME}" -o jsonpath='{.items[0].metadata.name}')
          kubectl -n "$NAMESPACE" logs "$POD" --tail=300 || true

      # 항상: Train Job 렌더/실행 — 파드는 git에서 __GIT_SHA__ 커밋을 받아서 /workspace/ml/train.py 실행
      - name: Render Train Job (git-based code)
        run: |
          set -e
          sed -e "s|__IMAGE__|${IMAGE_RUNTIME}|g" \
              -e "s|__GIT_SHA__|${GIT_SHA}|g" \
            k8s/train-job.yaml.tmpl > k8s/train-job.yaml
          echo "----- k8s/train-job.yaml -----"
          cat k8s/train-job.yaml

      - name: Cleanup previous Train job
        run: |
          kubectl -n "$NAMESPACE" delete job "$TRAIN_JOB_NAME" --ignore-not-found

      - name: Apply Train Job
        run: |
          kubectl -n "$NAMESPACE" apply -f k8s/train-job.yaml
          kubectl -n "$NAMESPACE" get pods -l job-name="$TRAIN_JOB_NAME" -o wide

      - name: Wait Train → logs
        run: |
          set -e
          kubectl -n "$NAMESPACE" wait --for=condition=complete --timeout=60m job/${TRAIN_JOB_NAME}
          POD=$(kubectl -n "$NAMESPACE" get pod -l job-name="${TRAIN_JOB_NAME}" -o jsonpath='{.items[0].metadata.name}')
          kubectl -n "$NAMESPACE" logs "$POD" --tail=300 || true

