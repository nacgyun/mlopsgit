name: Train with MLflow + Build & Run (Kaniko → Train)

on:
  push:
    branches: [ "master", "main" ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  NAMESPACE: mlops
  REGISTRY_IMAGE: ghcr.io/nacgyun/mlopsgit
  MLFLOW_TRACKING_URI: http://mlflow.mlops.svc.cluster.local:5000
  KANIKO_JOB_NAME: kaniko-build
  TRAIN_JOB_NAME: train-run

jobs:
  train-build-run:
    runs-on: [self-hosted, k8s]

    steps:
      # kubectl 없어서 터지던 거 방지
      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 태그 계산(리터럴 ${GIT_SHA} 문제 해결)
      - name: Set image tag
        id: tag
        run: |
          set -e
          TAG="$(echo '${{ github.sha }}' | cut -c1-12)"
          echo "TAG=$TAG"           | tee -a $GITHUB_ENV
          echo "IMAGE=${{ env.REGISTRY_IMAGE }}:${TAG}" | tee -a $GITHUB_ENV
          echo "image=${{ env.REGISTRY_IMAGE }}:${TAG}" >> $GITHUB_OUTPUT

      # Kaniko Job 템플릿 치환(__IMAGE__만 교체)
      - name: Render & Apply Kaniko Job (no template)
        run: |
          set -e
          kubectl -n "${NAMESPACE}" delete job "${KANIKO_JOB_NAME}" --ignore-not-found

          # Kaniko가 Git 리포를 빌드 컨텍스트로 직접 사용(템플릿/복사 불필요)
          cat <<'EOF' | envsubst > k8s-kaniko-job.yaml
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: ${KANIKO_JOB_NAME}
          spec:
            backoffLimit: 0
            template:
              spec:
                restartPolicy: Never
                containers:
                  - name: kaniko
                    image: gcr.io/kaniko-project/executor:latest
                    args:
                      # Git 리포를 컨텍스트로: 현재 커밋을 정확히 빌드
                      - --context=git://github.com/nacgyun/mlopsgit.git#${GITHUB_SHA}
                      - --dockerfile=Dockerfile
                      - --destination=${IMAGE}
                    volumeMounts:
                      - name: docker-config
                        mountPath: /kaniko/.docker/
                volumes:
                  - name: docker-config
                    secret:
                      secretName: ghcr-creds
                      items:
                        - key: .dockerconfigjson
                          path: config.json
          EOF

          kubectl -n "${NAMESPACE}" apply -f k8s-kaniko-job.yaml
          kubectl -n "${NAMESPACE}" wait --for=condition=complete --timeout=30m "job/${KANIKO_JOB_NAME}"
          kubectl -n "${NAMESPACE}" logs "job/${KANIKO_JOB_NAME}" --all-containers=true

      # (중요) 방금 만든 이미지로 train.py 실행 — 쿠버네티스 Job으로 돌림
      # ghcr pull 위해 imagePullSecrets(ghcr-creds) 사용, MLflow URI 주입
      - name: Run training in cluster (Job uses built image)
        run: |
          set -e
          kubectl -n "${NAMESPACE}" delete job "${TRAIN_JOB_NAME}" --ignore-not-found
          cat <<'EOF' | envsubst | kubectl -n "${NAMESPACE}" apply -f -
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: ${TRAIN_JOB_NAME}
          spec:
            backoffLimit: 0
            template:
              spec:
                restartPolicy: Never
                imagePullSecrets:
                  - name: ghcr-creds           # 이미 네임스페이스에 만든 그 시크릿
                containers:
                  - name: train
                    image: ${IMAGE}             # Kaniko가 만든 방금 그 이미지
                    imagePullPolicy: IfNotPresent
                    env:
                      - name: MLFLOW_TRACKING_URI
                        value: ${MLFLOW_TRACKING_URI}
                    command: ["python"]
                    args: ["train.py"]
          EOF

          # 완료 대기 + 로그 출력
          kubectl -n "${NAMESPACE}" wait --for=condition=complete --timeout=60m "job/${TRAIN_JOB_NAME}"
          echo "--- Train logs ---"
          kubectl -n "${NAMESPACE}" logs "job/${TRAIN_JOB_NAME}" --all-containers=true
        env:
          NAMESPACE: ${{ env.NAMESPACE }}
          TRAIN_JOB_NAME: ${{ env.TRAIN_JOB_NAME }}
          IMAGE: ${{ env.IMAGE }}
          MLFLOW_TRACKING_URI: ${{ env.MLFLOW_TRACKING_URI }}

      # 정리(항상)
      - name: Cleanup
        if: always()
        run: |
          kubectl -n "${NAMESPACE}" delete job "${KANIKO_JOB_NAME}" --ignore-not-found
          kubectl -n "${NAMESPACE}" delete job "${TRAIN_JOB_NAME}" --ignore-not-found
        env:
          NAMESPACE: ${{ env.NAMESPACE }}
          KANIKO_JOB_NAME: ${{ env.KANIKO_JOB_NAME }}
          TRAIN_JOB_NAME: ${{ env.TRAIN_JOB_NAME }}

