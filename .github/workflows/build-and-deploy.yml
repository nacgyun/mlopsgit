name: Build & Deploy (GHCR → K8s)

on:
  push:
    branches: [ master ]
    paths:
      - 'ml/**'
      - 'k8s/**'
      - '.github/workflows/build-and-deploy.yml'
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

env:
  IMAGE: ghcr.io/${{ github.repository_owner }}/mlflow-train:latest
  NAMESPACE: mlops
  JOB_NAME: mlflow-train-job

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ml/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.IMAGE }}
            ${{ env.IMAGE }}-${{ github.sha }}

  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      # (선택) kubectl이 없다면 활성화
      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      # 클러스터 접근: self-hosted 러너가 이미 KUBECONFIG를 갖고 있다면 아래 단계 불필요
      # - name: Write kubeconfig from secret
      #   if: env.KUBE_CONFIG_DATA != ''
      #   env:
      #     KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      #   run: |
      #     mkdir -p ~/.kube
      #     echo "$KUBE_CONFIG_DATA" | base64 -d > ~/.kube/config

      - name: Update train-script ConfigMap from repo
        run: |
          kubectl -n $NAMESPACE create configmap train-script \
            --from-file=train.py=ml/train.py \
            -o yaml --dry-run=client | kubectl apply -f -

      - name: Apply Job manifest
        env:
          IMAGE: ${{ env.IMAGE }}
        run: |
          # 이전 잡 제거(고정 이름 방식)
          kubectl -n $NAMESPACE delete job $JOB_NAME --ignore-not-found
          # 매니페스트 적용
          kubectl -n $NAMESPACE apply -f k8s/job.yaml

      - name: Wait for Job to complete (10m)
        run: |
          kubectl -n $NAMESPACE wait --for=condition=complete job/$JOB_NAME --timeout=600s || {
            echo "::error::Job failed or timed out. Showing logs…"
            kubectl -n $NAMESPACE logs -l job-name=$JOB_NAME --all-containers --tail=-1 || true
            kubectl -n $NAMESPACE describe job/$JOB_NAME || true
            exit 1
          }

      - name: Print logs
        if: always()
        run: |
          kubectl -n $NAMESPACE logs -l job-name=$JOB_NAME --all-containers --tail=-1 || true

