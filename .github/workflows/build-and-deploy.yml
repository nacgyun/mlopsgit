name: Train with MLflow + Build & Run (Kaniko → Train)

on:
  workflow_dispatch:
  push:
    branches: [ master ]

jobs:
  train-build-run:
    # 네 런너 라벨 (예: self-hosted + k8s) 유지
    runs-on: [self-hosted, k8s]

    env:
      NAMESPACE: mlops
      KANIKO_JOB_NAME: kaniko-build
      TRAIN_JOB_NAME: train-job
      # 태그는 커밋 해시 12자리
      TAG: ${{ github.sha }}
      SHORT_TAG: ${{ github.sha.substr(0,12) }}
      IMAGE: ghcr.io/nacgyun/mlopsgit:${{ github.sha.substr(0,12) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure kubectl exists (install if missing)
        run: |
          set -e
          if ! command -v kubectl >/dev/null 2>&1; then
            echo "::group::Install kubectl"
            ARCH=$(uname -m)
            case "$ARCH" in
              x86_64)  ARCH=amd64 ;;
              aarch64) ARCH=arm64 ;;
            esac
            curl -sSL -o kubectl "https://dl.k8s.io/release/$(curl -sSL https://dl.k8s.io/release/stable.txt)/bin/linux/${ARCH}/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/kubectl
            echo "::endgroup::"
          fi
          kubectl version --client=true

      - name: Show build variables
        run: |
          set -e
          echo "TAG=${TAG}"
          echo "SHORT_TAG=${SHORT_TAG}"
          echo "IMAGE=${IMAGE}"

      - name: Render Kaniko Job manifest (sed로 치환)
        run: |
          set -e
          sed -e "s|__IMAGE__|${IMAGE}|g" \
              -e "s|__TAG__|${SHORT_TAG}|g" \
            k8s/kaniko-build.yaml.tmpl > k8s/kaniko-build.yaml
          echo "----- k8s/kaniko-build.yaml -----"
          cat k8s/kaniko-build.yaml

      - name: Render Train Job manifest (sed로 치환)
        run: |
          set -e
          sed -e "s|__IMAGE__|${IMAGE}|g" \
              -e "s|__GIT_SHA__|${{ github.sha }}|g" \
            k8s/train-job.yaml.tmpl > k8s/train-job.yaml
          echo "----- k8s/train-job.yaml -----"
          cat k8s/train-job.yaml

      - name: Cleanup previous jobs (ignore-not-found)
        run: |
          set -e
          kubectl -n "${NAMESPACE}" delete job "${KANIKO_JOB_NAME}" --ignore-not-found
          kubectl -n "${NAMESPACE}" delete job "${TRAIN_JOB_NAME}"  --ignore-not-found

      - name: Apply Kaniko Job
        run: |
          set -e
          kubectl -n "${NAMESPACE}" apply -f k8s/kaniko-build.yaml
          kubectl -n "${NAMESPACE}" get pods -l job-name="${KANIKO_JOB_NAME}" -o wide

      - name: Wait for Kaniko Job to Succeed
        run: |
          set -e
          kubectl -n "${NAMESPACE}" wait --for=condition=complete --timeout=20m job/${KANIKO_JOB_NAME}
          echo "Kaniko job completed."
          echo "---- Kaniko pod logs (last 300 lines) ----"
          POD=$(kubectl -n "${NAMESPACE}" get pod -l job-name="${KANIKO_JOB_NAME}" -o jsonpath='{.items[0].metadata.name}')
          kubectl -n "${NAMESPACE}" logs "$POD" --tail=300 || true

      - name: Apply Train Job (runs train.py with built image)
        run: |
          set -e
          kubectl -n "${NAMESPACE}" apply -f k8s/train-job.yaml
          kubectl -n "${NAMESPACE}" get pods -l job-name="${TRAIN_JOB_NAME}" -o wide

      - name: Wait for Train Job to Succeed
        run: |
          set -e
          kubectl -n "${NAMESPACE}" wait --for=condition=complete --timeout=60m job/${TRAIN_JOB_NAME}
          echo "Train job completed."
          echo "---- Train pod logs (last 300 lines) ----"
          POD=$(kubectl -n "${NAMESPACE}" get pod -l job-name="${TRAIN_JOB_NAME}" -o jsonpath='{.items[0].metadata.name}')
          kubectl -n "${NAMESPACE}" logs "$POD" --tail=300 || true

