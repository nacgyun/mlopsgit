      - name: Launch Kaniko Job
        run: |
          # NOTE: strip the first 10 leading spaces from the heredoc body
          sed -e 's/^ \{10\}//' <<'K8S' | kubectl -n "$NAMESPACE" apply -f -
                    apiVersion: batch/v1
                    kind: Job
                    metadata:
                      name: kaniko-build
                    spec:
                      backoffLimit: 0
                      template:
                        spec:
                          restartPolicy: Never
                          initContainers:
                            - name: fetch-src
                              image: alpine:3.20
                              command: ["/bin/sh","-lc"]
                              args:
                                - |
                                  set -e
                                  mkdir -p /workspace
                                  echo "waiting for /workspace/.ready ..."
                                  while [ ! -f /workspace/.ready ]; do sleep 1; done
                                  echo "ready"
                              volumeMounts:
                                - name: workspace
                                  mountPath: /workspace
                          containers:
                            - name: kaniko
                              image: gcr.io/kaniko-project/executor:latest
                              args:
                                - --context=/workspace
                                - --dockerfile=/workspace/Dockerfile
                                - --destination=${IMAGE}
                              volumeMounts:
                                - name: docker-config
                                  mountPath: /kaniko/.docker/
                                - name: workspace
                                  mountPath: /workspace
                          volumes:
                            - name: docker-config
                              secret:
                                secretName: ghcr-creds
                                items:
                                  - key: .dockerconfigjson
                                    path: config.json
                            - name: workspace
                              emptyDir: {}
K8S

      - name: Upload source in chunks & release init
        run: |
          set -e
          for i in {1..60}; do
            POD=$(kubectl -n "$NAMESPACE" get pods -l job-name=kaniko-build -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || true)
            [ -n "$POD" ] && break
            sleep 2
          done
          echo "POD=$POD"

          kubectl -n "$NAMESPACE" exec "$POD" -c fetch-src -- sh -lc 'rm -rf /workspace/upload && mkdir -p /workspace/upload'

          TAR="$RUNNER_TEMP/src.tgz"
          tar -C "$GITHUB_WORKSPACE" -czf "$TAR" .
          split -b 1m -d -a 4 "$TAR" "$RUNNER_TEMP/part."

          for f in $RUNNER_TEMP/part.*; do
            bn=$(basename "$f")
            ok=0
            for i in {1..6}; do
              if cat "$f" | kubectl -n "$NAMESPACE" exec -i "$POD" -c fetch-src -- sh -lc "cat > /workspace/upload/$bn"; then
                ok=1; break
              fi
              echo "chunk $bn failed; retry $i/6"; sleep 2
            done
            [ "$ok" = "1" ] || (echo "giving up chunk $bn"; exit 1)
          done

          kubectl -n "$NAMESPACE" exec "$POD" -c fetch-src -- sh -lc '
            set -e
            cat /workspace/upload/part.* > /workspace/src.tgz
            rm -rf /workspace/upload
            tar -xzf /workspace/src.tgz -C /workspace
            rm /workspace/src.tgz
            touch /workspace/.ready
            ls -lah /workspace | head -n 50
          '

      - name: Wait for Kaniko build to finish (with diagnostics)
        run: |
          set -e
          if ! kubectl -n "$NAMESPACE" wait --for=condition=Complete job/kaniko-build --timeout=20m; then
            echo "== JOB FAILED: diagnostics =="
            kubectl -n "$NAMESPACE" get job/kaniko-build -o wide || true
            kubectl -n "$NAMESPACE" describe job/kaniko-build || true
            kubectl -n "$NAMESPACE" get pods -l job-name=kaniko-build -o wide || true
            POD=$(kubectl -n "$NAMESPACE" get pods -l job-name=kaniko-build -o jsonpath='{.items[0].metadata.name}')
            kubectl -n "$NAMESPACE" describe pod "$POD" || true
            echo "== INIT(fetch-src) tail =="
            kubectl -n "$NAMESPACE" logs "$POD" -c fetch-src --tail=200 || true
            echo "== KANIKO tail =="
            kubectl -n "$NAMESPACE" logs "$POD" -c kaniko --tail=200 || true
            exit 1
          fi

      - name: Run training Job (MLflow)
        run: |
          # same trick here to avoid heredoc indent issues
          sed -e 's/^ \{10\}//' <<'K8S' > /tmp/iris-train.yaml
                    apiVersion: batch/v1
                    kind: Job
                    metadata:
                      name: iris-train
                      labels: { app: iris-train }
                    spec:
                      ttlSecondsAfterFinished: 600
                      backoffLimit: 0
                      template:
                        spec:
                          restartPolicy: Never
                          imagePullSecrets:
                            - name: ghcr-creds
                          containers:
                            - name: train
                              image: ${IMAGE}
                              imagePullPolicy: IfNotPresent
                              env:
                                - name: MLFLOW_TRACKING_URI
                                  value: http://mlflow.mlops.svc.cluster.local:5000
                                - name: MLFLOW_EXPERIMENT_NAME
                                  value: iris-rf
                                - name: MLFLOW_S3_ENDPOINT_URL
                                  value: http://minio.mlops.svc.cluster.local:9000
                                - name: AWS_ACCESS_KEY_ID
                                  valueFrom: { secretKeyRef: { name: minio-creds, key: accessKey } }
                                - name: AWS_SECRET_ACCESS_KEY
                                  valueFrom: { secretKeyRef: { name: minio-creds, key: secretKey } }
                              resources:
                                requests: { cpu: "500m", memory: "1Gi" }
                                limits:   { cpu: "2",    memory: "4Gi" }
K8S
          kubectl -n "$NAMESPACE" delete job iris-train --ignore-not-found
          kubectl -n "$NAMESPACE" apply -f /tmp/iris-train.yaml

