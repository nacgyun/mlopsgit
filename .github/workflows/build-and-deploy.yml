name: build-and-deploy
on:
  push:
    branches: ["master"]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  NAMESPACE: mlops
  APP_NAME: myapp                          # Deployment 이름(컨테이너 이름도 동일 가정)
  IMAGE_REPO: ghcr.io/${{ github.repository }}
  IMAGE_TAG: ${{ github.sha }}
  IMAGE: ghcr.io/${{ github.repository }}:${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      # kubectl 설치 (sudo 불필요)
      - name: Install kubectl (no-sudo)
        run: |
          set -e
          ver=$(curl -Ls https://dl.k8s.io/release/stable.txt)
          curl -Ls -o $RUNNER_TEMP/kubectl https://dl.k8s.io/release/${ver}/bin/linux/amd64/kubectl
          chmod +x $RUNNER_TEMP/kubectl
          echo "$RUNNER_TEMP" >> "$GITHUB_PATH"
          kubectl version --client --short

      # kubeconfig 주입 (리포지토리 시크릿에 KUBECONFIG 넣어둬야 함)
      - name: Configure kube access
        run: |
          set -e
          echo "${{ secrets.KUBECONFIG }}" > $RUNNER_TEMP/kubeconfig
          echo "KUBECONFIG=$RUNNER_TEMP/kubeconfig" >> $GITHUB_ENV
          kubectl version --short
          kubectl get ns

      # 네임스페이스 없으면 생성
      - name: Ensure namespace exists
        run: kubectl get ns "$NAMESPACE" || kubectl create ns "$NAMESPACE"

      # GHCR 푸시용 도커 시크릿 준비 (Kaniko가 /kaniko/.docker/config.json 으로 사용)
      - name: Ensure GHCR docker secret
        run: |
          kubectl -n "$NAMESPACE" create secret docker-registry ghcr-creds \
            --docker-server=ghcr.io \
            --docker-username="${{ github.actor }}" \
            --docker-password="${{ secrets.GITHUB_TOKEN }}" \
            --docker-email="ci@example.local" \
            --dry-run=client -o yaml | kubectl apply -f -

      # 이전 Kaniko Job 정리
      - name: Cleanup previous Kaniko Job
        run: kubectl -n "$NAMESPACE" delete job kaniko-build --ignore-not-found=true

      # Kaniko Job 실행 (Git 커밋 SHA 컨텍스트로 빌드 → GHCR 푸시)
      - name: Launch Kaniko Job
        env:
          GIT_URL: https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git#${{ github.sha }}
        run: |
          cat <<'YAML' | envsubst | kubectl -n "$NAMESPACE" apply -f -
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: kaniko-build
          spec:
            backoffLimit: 0
            template:
              spec:
                restartPolicy: Never
                containers:
                  - name: kaniko
                    image: gcr.io/kaniko-project/executor:latest
                    args:
                      - --context=${GIT_URL}
                      - --dockerfile=Dockerfile
                      - --destination=${IMAGE}
                      # 캐시 쓰고 싶으면 주석 해제
                      # - --cache=true
                      # - --cache-repo=${IMAGE_REPO}-cache
                    volumeMounts:
                      - name: docker-config
                        mountPath: /kaniko/.docker/
                volumes:
                  - name: docker-config
                    secret:
                      secretName: ghcr-creds
                      items:
                        - key: .dockerconfigjson
                          path: config.json
          YAML

      # Kaniko 완료 대기 + 로그 출력
      - name: Wait for Kaniko build to finish
        run: |
          set -e
          kubectl -n "$NAMESPACE" wait --for=condition=Complete job/kaniko-build --timeout=20m
          POD=$(kubectl -n "$NAMESPACE" get pods -l job-name=kaniko-build -o jsonpath='{.items[0].metadata.name}')
          echo "== Kaniko Logs =="
          kubectl -n "$NAMESPACE" logs "$POD"

      # 배포 적용: 기존 매니페스트 적용 후 이미지 태그만 교체
      - name: Apply manifests
        run: |
          set -e
          # 네 레포의 배포 매니페스트 경로에 맞게 수정
          kubectl -n "$NAMESPACE" apply -f k8s/deploy.yaml

      - name: Update image to new tag
        run: |
          set -e
          kubectl -n "$NAMESPACE" set image deploy/${APP_NAME} ${APP_NAME}=${IMAGE} --record
          kubectl -n "$NAMESPACE" rollout status deploy/${APP_NAME} --timeout=5m

