name: Build and Push with Kaniko

on:
  push:
    branches: [ "master", "main" ]
  workflow_dispatch:

# (self-hosted 러너에서 kubectl 사용하므로 별도 권한 설정 불필요)
permissions:
  contents: read

env:
  NAMESPACE: mlops
  REGISTRY: ghcr.io
  IMAGE_REPO: nacgyun/mlopsgit

jobs:
  kaniko-build:
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set image tag
        run: |
          echo "TAG=${GITHUB_SHA}" >> "$GITHUB_ENV"
          echo "IMAGE=${REGISTRY}/${IMAGE_REPO}:${GITHUB_SHA}" >> "$GITHUB_ENV"

      - name: Render & apply Kaniko Job
        run: |
          # __IMAGE__ 치환해서 Job 생성/갱신
          sed "s|__IMAGE__|${IMAGE}|g" kaniko-build.yaml.tmpl \
          | kubectl -n "${NAMESPACE}" apply -f -

      - name: Wait until kaniko pod is schedulable and get name
        id: pod
        shell: bash
        run: |
          # kaniko 파드 뜰 때까지 대기
          for i in {1..60}; do
            POD=$(kubectl -n "${NAMESPACE}" get pod -l job-name=kaniko-build \
              -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || true)
            if [[ -n "$POD" ]]; then
              # 컨테이너가 생성되기 시작할 때까지 살짝 더 대기
              kubectl -n "${NAMESPACE}" get pod "$POD"
              echo "pod_name=$POD" >> "$GITHUB_OUTPUT"
              break
            fi
            sleep 2
          done
          if [[ -z "${POD}" ]]; then
            echo "::error::kaniko pod not found"
            exit 1
          fi

      - name: Copy source into /workspace (init container is waiting)
        run: |
          POD="${{ steps.pod.outputs.pod_name }}"
          # /workspace로 전체 소스 복사( tar 필요 → alpine 베이스라 ok )
          kubectl -n "${NAMESPACE}" cp . "${POD}:/workspace" -c fetch-src

      - name: Release init container (touch .ready)
        run: |
          POD="${{ steps.pod.outputs.pod_name }}"
          kubectl -n "${NAMESPACE}" exec -c fetch-src "${POD}" -- sh -lc 'touch /workspace/.ready'

      - name: Stream logs (kaniko)
        run: |
          kubectl -n "${NAMESPACE}" logs -f job/kaniko-build -c kaniko

      - name: Wait for Job completion
        run: |
          kubectl -n "${NAMESPACE}" wait --for=condition=complete --timeout=20m job/kaniko-build

      - name: On failure, dump pod describe & logs
        if: failure()
        run: |
          kubectl -n "${NAMESPACE}" get pods -l job-name=kaniko-build -o wide || true
          kubectl -n "${NAMESPACE}" describe job/kaniko-build || true
          kubectl -n "${NAMESPACE}" logs job/kaniko-build --all-containers --tail=-1 || true

      - name: Cleanup
        if: always()
        run: |
          kubectl -n "${NAMESPACE}" delete job kaniko-build --ignore-not-found

