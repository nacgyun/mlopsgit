name: CI/CD

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    runs-on: [self-hosted, Linux, X64]   # 우리 k8s 안의 self-hosted runner로만 실행
    env:
      NAMESPACE: mlops
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install kubectl if missing (no sudo)
        run: |
          set -euo pipefail
          if ! command -v kubectl >/dev/null 2>&1; then
            mkdir -p "$HOME/bin"
            curl -fsSL -o "$HOME/bin/kubectl" \
              "https://storage.googleapis.com/kubernetes-release/release/$(curl -fsSL https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x "$HOME/bin/kubectl"
            echo "$HOME/bin" >> "$GITHUB_PATH"
          fi
          kubectl version --client

      - name: Configure in-cluster kubeconfig (use SA token)
        run: |
          set -euo pipefail
          API="https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}"
          SA_TOKEN="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"
          CA="/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
          kubectl config set-cluster in-cluster --server="$API" --certificate-authority="$CA" --embed-certs=true
          kubectl config set-credentials sa --token="$SA_TOKEN"
          kubectl config set-context in-cluster --cluster=in-cluster --user=sa --namespace="$NAMESPACE"
          kubectl config use-context in-cluster
          echo "RBAC check:" && kubectl auth can-i "*" "*" -n "$NAMESPACE" || true
          kubectl get ns "$NAMESPACE"

      - name: Apply manifests
        run: |
          set -euo pipefail
          # manifest 디렉터리 자동 탐지 (없으면 에러)
          for d in k8s manifests kubernetes; do
            if [ -d "$d" ]; then MANIFEST_DIR="$d"; break; fi
          done
          if [ -z "${MANIFEST_DIR:-}" ]; then
            echo "::error::No manifest directory found (expected one of: k8s/, manifests/, kubernetes/)"
            exit 1
          fi

          echo "Applying manifests from: $MANIFEST_DIR"
          kubectl -n "$NAMESPACE" apply -R -f "$MANIFEST_DIR"

          echo "Cluster status:"
          kubectl -n "$NAMESPACE" get all -o wide

