name: CI/CD

on:
  push:
    branches: [ master ]
  workflow_dispatch:

concurrency:
  group: ci-cd-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  deploy:
    runs-on: [self-hosted, Linux, X64]
    env:
      NAMESPACE: mlops
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # kubectl 설치 (버전 고정 권장)
      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: v1.29.6

      - name: Diagnostics
        run: |
          set -x
          whoami
          uname -a
          kubectl version --client
          echo "KUBERNETES_SERVICE_HOST=${KUBERNETES_SERVICE_HOST:-<unset>}"
          echo "KUBERNETES_SERVICE_PORT=${KUBERNETES_SERVICE_PORT:-<unset>}"
          ls -l /var/run/secrets/kubernetes.io/serviceaccount || true

      - name: Configure in-cluster kubeconfig
        run: |
          set -euo pipefail
          API="https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}"
          SA_TOKEN="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"
          CA="/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
          kubectl config set-cluster in-cluster --server="$API" --certificate-authority="$CA" --embed-certs=true
          kubectl config set-credentials sa --token="$SA_TOKEN"
          kubectl config set-context in-cluster --cluster=in-cluster --user=sa --namespace="$NAMESPACE"
          kubectl config use-context in-cluster
          kubectl get ns "$NAMESPACE"

      - name: Preflight - auth & context check
        run: |
          set -euo pipefail
          kubectl config current-context
          kubectl -n "$NAMESPACE" auth can-i get pods
          kubectl -n "$NAMESPACE" auth can-i create configmap
          kubectl -n "$NAMESPACE" auth can-i apply deployment || true

      - name: Apply manifests
        run: |
          set -euo pipefail
          # 매니페스트 디렉토리 자동 탐색
          for d in k8s manifests kubernetes; do
            if [ -d "$d" ]; then MANIFEST_DIR="$d"; break; fi
          done
          if [ -z "${MANIFEST_DIR:-}" ]; then
            echo "::error::No manifest directory found (expected: k8s/ or manifests/ or kubernetes/)"
            exit 1
          fi

          echo "Using MANIFEST_DIR=$MANIFEST_DIR"
          if [ -f "$MANIFEST_DIR/kustomization.yaml" ] || [ -f "$MANIFEST_DIR/kustomization.yml" ]; then
            kubectl -n "$NAMESPACE" apply -k "$MANIFEST_DIR"
          else
            kubectl -n "$NAMESPACE" apply -R -f "$MANIFEST_DIR"
          fi

      - name: Post - status
        if: always()
        run: |
          kubectl -n "$NAMESPACE" get all -o wide
          kubectl -n "$NAMESPACE" get events --sort-by=.lastTimestamp | tail -n 50

