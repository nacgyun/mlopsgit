name: Promote-Selected-Model

on:
  workflow_dispatch:
    inputs:
      model_name:
        description: "MLflow model name (e.g. light-logreg)"
        required: true
        default: "light-logreg"
      run_id:
        description: "RUN_ID from MLflow UI (the training run you want to promote/deploy)"
        required: true
      serve_stage:
        description: "Stage to serve (ex. Production)"
        required: true
        default: "Production"

jobs:
  promote:
    runs-on: self-hosted

    env:
      # --- cluster / deployment config ---
      NAMESPACE: mlops
      SERVE_DEPLOY: light-serve
      SERVE_CONTAINER_INDEX: "0"
      SERVE_PORT: "8000"

      # --- MLflow / registry info ---
      MLFLOW_TRACKING_URI: http://mlflow.mlops.svc.cluster.local:5000
      MODEL_NAME: ${{ inputs.model_name }}
      RUN_ID: ${{ inputs.run_id }}
      SERVE_STAGE: ${{ inputs.serve_stage }}

    steps:
      #######################################################################
      # 0. checkout (need promote.py in repo)
      #######################################################################
      - uses: actions/checkout@v4

      #######################################################################
      # 1. python runtime (we'll talk to MLflow)
      #######################################################################
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (runner side)
        run: |
          pip install --no-cache-dir \
            mlflow-skinny \
            boto3 \
            kubernetes \
            pyyaml \
            jq

      #######################################################################
      # 2. kubectl in this runner
      #######################################################################
      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: "v1.30.0"

      #######################################################################
      # 3. in-cluster kubeconfig using this runner's SA token
      #######################################################################
      - name: Build in-cluster kubeconfig
        env:
          NAMESPACE: ${{ env.NAMESPACE }}
        run: |
          set -e
          CACERT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
          API="https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}"

          kubectl config set-cluster in-cluster \
            --server="${API}" \
            --certificate-authority="${CACERT}" \
            --embed-certs=true

          kubectl config set-credentials sa --token="${SA_TOKEN}"

          kubectl config set-context in-cluster \
            --cluster=in-cluster \
            --user=sa \
            --namespace="${NAMESPACE}"

          kubectl config use-context in-cluster

      #######################################################################
      # 4. Promote that RUN_ID into the model registry stage.
      #    promote.py is expected to:
      #      - register runs:/<RUN_ID>/model into MODEL_NAME
      #      - transition that version to SERVE_STAGE (Production, etc.)
      #######################################################################
      - name: Promote MLflow model/version
        env:
          MLFLOW_TRACKING_URI: ${{ env.MLFLOW_TRACKING_URI }}
          MODEL_NAME: ${{ env.MODEL_NAME }}
          RUN_ID: ${{ env.RUN_ID }}
          SERVE_STAGE: ${{ env.SERVE_STAGE }}
        run: |
          set -euo pipefail
          echo "[info] Promoting RUN_ID=${RUN_ID} -> ${MODEL_NAME} stage=${SERVE_STAGE}"
          python promote.py
          echo "[info] Promote done."

      #######################################################################
      # 5. Read GHCR image info from MLflow run tags
      #
      # train.py should be tagging:
      #   ghcr.ref         (preferred full ref, e.g. ghcr.io/...:runtime-<hash> or with @sha256)
      #   ghcr.image
      #   ghcr.digest
      #   ghcr.tag
      #
      # priority:
      #   ghcr.ref
      #   ghcr.image@ghcr.digest
      #   ghcr.image:ghcr.tag
      #######################################################################
      - name: Resolve runtime image from MLflow run tags
        id: resolve_image
        env:
          MLFLOW_TRACKING_URI: ${{ env.MLFLOW_TRACKING_URI }}
          RUN_ID: ${{ env.RUN_ID }}
        run: |
          set -euo pipefail
          python - << 'PYCODE'
          import os, sys, mlflow

          tracking_uri = os.environ["MLFLOW_TRACKING_URI"]
          run_id = os.environ["RUN_ID"]

          mlflow.set_tracking_uri(tracking_uri)
          run = mlflow.get_run(run_id)
          tags = run.data.tags or {}

          ref     = (tags.get("ghcr.ref") or "").strip()
          image   = (tags.get("ghcr.image") or "").strip()
          digest  = (tags.get("ghcr.digest") or "").strip()
          tag     = (tags.get("ghcr.tag") or "").strip()

          serve_image = ""
          reason = ""

          if ref:
              serve_image = ref
              reason = "ghcr.ref"
          elif image and digest:
              serve_image = f"{image}@{digest}"
              reason = "image+digest"
          elif image and tag:
              serve_image = f"{image}:{tag}"
              reason = "image+tag"
          else:
              serve_image = ""
              reason = "fallback-none"

          print(f"[resolve_image] RUN_ID={run_id}")
          print(f"[resolve_image] SERVE_IMAGE={serve_image} (from {reason})", file=sys.stderr)

          with open(os.environ["GITHUB_ENV"], "a") as f:
              f.write(f"SERVE_IMAGE={serve_image}\n")
              f.write(f"SERVE_IMAGE_REASON={reason}\n")
          PYCODE

          echo "[info] SERVE_IMAGE=${SERVE_IMAGE} (reason=${SERVE_IMAGE_REASON})"
          if [ -z "${SERVE_IMAGE}" ]; then
            echo "::warning ::Could not resolve SERVE_IMAGE from MLflow tags; will reuse current Deployment image."
          fi

      #######################################################################
      # 6. Make sure env vars needed for mlflow models serve to pull from MinIO
      #
      # This only ensures static envs (endpoint, region, path style).
      # We assume minio creds are already present in Deployment as secretKeyRef.
      #######################################################################
      - name: Ensure MLflow/MinIO env on Deployment
        env:
          NAMESPACE: ${{ env.NAMESPACE }}
          SERVE_DEPLOY: ${{ env.SERVE_DEPLOY }}
          MLFLOW_TRACKING_URI: ${{ env.MLFLOW_TRACKING_URI }}
        run: |
          set -euo pipefail
          kubectl -n "${NAMESPACE}" set env deploy/${SERVE_DEPLOY} \
            MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI} \
            MLFLOW_S3_ENDPOINT_URL=http://minio.${NAMESPACE}.svc.cluster.local:9000 \
            AWS_DEFAULT_REGION=us-east-1 \
            AWS_S3_FORCE_PATH_STYLE=true \
            || true

      #######################################################################
      # 7. Now we do the IMPORTANT part:
      #
      #    (a) scale the Deployment to 0 so old pod goes away.
      #    (b) patch Deployment template so that:
      #        - replicas=1 "later"
      #        - container image (if resolved)
      #        - container command/args to serve the stage we just promoted
      #        - ports, probes, resources
      #    (c) update workflows/restartedAt annotation using "replace", and
      #        if replace fails (first run?), try "add".
      #    (d) scale back up to 1
      #
      # => This guarantees a fresh pod every run_id even if image didn't change.
      #######################################################################
      - name: Reconcile Deployment spec (image/cmd/probes) + restart
        env:
          NAMESPACE: ${{ env.NAMESPACE }}
          SERVE_DEPLOY: ${{ env.SERVE_DEPLOY }}
          SERVE_CONTAINER_INDEX: ${{ env.SERVE_CONTAINER_INDEX }}
          SERVE_PORT: ${{ env.SERVE_PORT }}
          MODEL_NAME: ${{ env.MODEL_NAME }}
          SERVE_STAGE: ${{ env.SERVE_STAGE }}
          SERVE_IMAGE: ${{ env.SERVE_IMAGE }}
        run: |
          set -euo pipefail

          echo "[info] scaling ${SERVE_DEPLOY} to 0 first..."
          kubectl -n "${NAMESPACE}" scale deploy "${SERVE_DEPLOY}" --replicas=0

          CMD="mlflow models serve -m models:/${MODEL_NAME}/${SERVE_STAGE} --host 0.0.0.0 --port ${SERVE_PORT} --env-manager local"
          echo "[info] new CMD: ${CMD}"

          # patch command/args/ports/resources/probes
          kubectl -n "${NAMESPACE}" patch deploy "${SERVE_DEPLOY}" --type='json' -p="[
            {\"op\":\"replace\",\"path\":\"/spec/template/spec/containers/${SERVE_CONTAINER_INDEX}/command\",
             \"value\":[\"sh\",\"-c\"]},

            {\"op\":\"replace\",\"path\":\"/spec/template/spec/containers/${SERVE_CONTAINER_INDEX}/args\",
             \"value\":[\"${CMD}\"]},

            {\"op\":\"replace\",\"path\":\"/spec/template/spec/containers/${SERVE_CONTAINER_INDEX}/ports\",
             \"value\":[{\"containerPort\": ${SERVE_PORT}, \"name\": \"http\"}]},

            {\"op\":\"replace\",\"path\":\"/spec/template/spec/containers/${SERVE_CONTAINER_INDEX}/resources\",
             \"value\":{
               \"requests\": {\"cpu\": \"200m\", \"memory\": \"512Mi\"},
               \"limits\":   {\"cpu\": \"1\",    \"memory\": \"1Gi\"}
             }},

            {\"op\":\"replace\",\"path\":\"/spec/template/spec/containers/${SERVE_CONTAINER_INDEX}/startupProbe\",
             \"value\":{
               \"httpGet\": {\"path\": \"/ping\", \"port\": \"http\"},
               \"initialDelaySeconds\": 30,
               \"periodSeconds\": 5,
               \"timeoutSeconds\": 3,
               \"failureThreshold\": 120,
               \"successThreshold\": 1
             }},

            {\"op\":\"replace\",\"path\":\"/spec/template/spec/containers/${SERVE_CONTAINER_INDEX}/readinessProbe\",
             \"value\":{
               \"httpGet\": {\"path\": \"/ping\", \"port\": \"http\"},
               \"periodSeconds\": 5,
               \"timeoutSeconds\": 2,
               \"failureThreshold\": 6,
               \"successThreshold\": 1
             }},

            {\"op\":\"replace\",\"path\":\"/spec/template/spec/containers/${SERVE_CONTAINER_INDEX}/livenessProbe\",
             \"value\":{
               \"httpGet\": {\"path\": \"/ping\", \"port\": \"http\"},
               \"initialDelaySeconds\": 60,
               \"periodSeconds\": 10,
               \"timeoutSeconds\": 2,
               \"failureThreshold\": 3,
               \"successThreshold\": 1
             }}
          ]"

          # patch image IF we resolved SERVE_IMAGE from the run
          if [ -n "${SERVE_IMAGE}" ]; then
            echo "[info] patching container image -> ${SERVE_IMAGE}"
            kubectl -n "${NAMESPACE}" patch deploy "${SERVE_DEPLOY}" --type='json' -p="[
              {\"op\":\"replace\",\"path\":\"/spec/template/spec/containers/${SERVE_CONTAINER_INDEX}/image\",
               \"value\":\"${SERVE_IMAGE}\"}
            ]"
          else
            echo "::warning ::no SERVE_IMAGE resolved, keeping existing image"
          fi

          # bump workflows/restartedAt so the pod template hash changes every run
          TS=$(date +%s)
          echo "[info] bumping workflows/restartedAt=${TS}"

          # try replace first
          set +e
          kubectl -n "${NAMESPACE}" patch deploy "${SERVE_DEPLOY}" --type='json' -p="[
            {\"op\":\"replace\",
             \"path\":\"/spec/template/metadata/annotations/workflows~1restartedAt\",
             \"value\":\"${TS}\"}
          ]"
          RC=$?
          set -e
          if [ $RC -ne 0 ]; then
            echo "[warn] replace failed, falling back to add"
            kubectl -n "${NAMESPACE}" patch deploy "${SERVE_DEPLOY}" --type='json' -p="[
              {\"op\":\"add\",
               \"path\":\"/spec/template/metadata/annotations/workflows~1restartedAt\",
               \"value\":\"${TS}\"}
            ]"
          fi

          echo "[info] scaling ${SERVE_DEPLOY} back to 1..."
          kubectl -n "${NAMESPACE}" scale deploy "${SERVE_DEPLOY}" --replicas=1

      #######################################################################
      # 8. Wait until rollout is healthy (new pod should now spawn fresh)
      #######################################################################
      - name: Wait for rollout
        env:
          NAMESPACE: ${{ env.NAMESPACE }}
          SERVE_DEPLOY: ${{ env.SERVE_DEPLOY }}
        run: |
          set -euo pipefail
          kubectl -n "${NAMESPACE}" rollout status deploy/${SERVE_DEPLOY} --timeout=300s
          echo "[info] Pods after rollout:"
          kubectl -n "${NAMESPACE}" get pods -l app=${SERVE_DEPLOY} -o wide

