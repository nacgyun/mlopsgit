name: Promote-Selected-Model
on:
  workflow_dispatch:
    inputs:
      model_name:
        description: "MLflow model name (e.g., light-logreg)"
        required: true
        default: "light-logreg"
      run_id:
        description: "RUN_ID to promote (copy from MLflow UI)"
        required: true
      reload_method:
        description: "How to refresh serve (rollout|http)"
        required: true
        default: "rollout"

jobs:
  promote:
    runs-on: self-hosted
    env:
      # 클러스터/서비스 기본값
      NAMESPACE: mlops
      SERVE_DEPLOY: light-serve
      SERVE_PORT: "8000"
      SERVE_STAGE: Production

      # MLflow
      MLFLOW_TRACKING_URI: http://mlflow.mlops.svc.cluster.local:5000
      MODEL_NAME: ${{ inputs.model_name }}
      RUN_ID: ${{ inputs.run_id }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps (runner side)
        run: pip install --no-cache-dir mlflow-skinny boto3

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.30.0'

      - name: Build in-cluster kubeconfig (runner pod)
        run: |
          set -e
          CACERT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
          API="https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}"
          kubectl config set-cluster in-cluster --server="${API}" --certificate-authority="${CACERT}" --embed-certs=true
          kubectl config set-credentials sa --token="${SA_TOKEN}"
          kubectl config set-context in-cluster --cluster=in-cluster --user=sa --namespace=${NAMESPACE}
          kubectl config use-context in-cluster

      - name: Promote in MLflow (runs:/<RUN_ID>/model)
        run: python promote.py

      # --- serve가 S3(MinIO)에서 모델 다운받도록 환경 보장 (없으면 추가)
      - name: Ensure S3 env on serve
        run: |
          kubectl -n "${NAMESPACE}" set env deploy/${SERVE_DEPLOY} \
            MLFLOW_S3_ENDPOINT_URL=http://minio.${NAMESPACE}.svc.cluster.local:9000 \
            AWS_DEFAULT_REGION=us-east-1 \
            AWS_S3_FORCE_PATH_STYLE=true
          # (선택) 시크릿 기반 액세스 키가 있을 경우 주입
          # kubectl -n "${NAMESPACE}" patch deploy ${SERVE_DEPLOY} --type='json' -p='[
          #   {"op":"add","path":"/spec/template/spec/containers/0/env/-","value":{"name":"AWS_ACCESS_KEY_ID","valueFrom":{"secretKeyRef":{"name":"minio-creds","key":"accessKey"}}}},
          #   {"op":"add","path":"/spec/template/spec/containers/0/env/-","value":{"name":"AWS_SECRET_ACCESS_KEY","valueFrom":{"secretKeyRef":{"name":"minio-creds","key":"secretKey"}}}}
          # ]'

      # --- serve 컨테이너 시작 시 boto3를 설치한 뒤 mlflow serve 실행하도록 command/args 패치
      - name: Patch serve entrypoint to install boto3 then start mlflow serve
        run: |
          set -e
          # 현재 Deployment 이름 확인(부분일치)
          DEPLOY=$(kubectl -n "${NAMESPACE}" get deploy -o name | grep "${SERVE_DEPLOY}" || true)
          if [ -z "$DEPLOY" ]; then
            echo "Cannot find Deployment containing '${SERVE_DEPLOY}'"; exit 1
          fi
          # command/args를 sh -c로 교체 (기존 'mlflow' 커맨드 무시하고 우리가 실행)
          # 모델 URI는 models:/<MODEL_NAME>/<SERVE_STAGE> 고정
          MODEL_URI="models:/${MODEL_NAME}/${SERVE_STAGE}"
          kubectl -n "${NAMESPACE}" patch ${DEPLOY} --type='json' -p="[
            {\"op\":\"replace\",\"path\":\"/spec/template/spec/containers/0/command\",\"value\":[\"sh\",\"-c\"]},
            {\"op\":\"replace\",\"path\":\"/spec/template/spec/containers/0/args\",\"value\":[\"pip install boto3 && mlflow models serve -m ${MODEL_URI} --host 0.0.0.0 --port ${SERVE_PORT} --env-manager local\"]}
          ]"

      # --- 롤링 재시작으로 새 엔트리포인트 적용(=boto3 설치 후 serve 시작)
      - name: Rollout restart serve
        run: |
          set -e
          DEPLOY=$(kubectl -n "${NAMESPACE}" get deploy -o name | grep "${SERVE_DEPLOY}")
          kubectl -n "${NAMESPACE}" rollout restart "${DEPLOY}"
          kubectl -n "${NAMESPACE}" rollout status "${DEPLOY}" --timeout=300s

      # --- (옵션) http 리로드도 구성해 두고 싶다면 유지. 하지만 boto3 설치는 재시작이 필요하므로 의미는 적음.
      - name: Call /reload on light-serve (HTTP) [optional]
        if: ${{ inputs.reload_method == 'http' }}
        run: |
          curl -s -X POST http://${{ env.SERVE_DEPLOY }}.${{ env.NAMESPACE }}.svc.cluster.local:${{ env.SERVE_PORT }}/reload || true

