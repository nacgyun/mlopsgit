name: Promote-Selected-Model

on:
  workflow_dispatch:
    inputs:
      model_name:
        description: "MLflow model name (e.g. light-logreg)"
        required: true
        default: "light-logreg"
      run_id:
        description: "RUN_ID from MLflow UI (the training run you want to deploy)"
        required: true
      serve_stage:
        description: "Stage to serve (ex. Production)"
        required: true
        default: "Production"

jobs:
  promote:
    runs-on: self-hosted

    env:
      # --- cluster / deployment config ---
      NAMESPACE: mlops
      SERVE_DEPLOY: light-serve
      SERVE_CONTAINER_INDEX: "0"
      SERVE_PORT: "8000"

      # --- MLflow / registry info ---
      MLFLOW_TRACKING_URI: http://10.100.0.102:32055
      MODEL_NAME: ${{ inputs.model_name }}
      RUN_ID: ${{ inputs.run_id }}
      SERVE_STAGE: ${{ inputs.serve_stage }}

    steps:
      #######################################################################
      # 0. Checkout repo (promote.py 안 써도 되지만 깃 SHA 등 참고용)
      #######################################################################
      - uses: actions/checkout@v4

      #######################################################################
      # 1. Python on runner (for mlflow client)
      #######################################################################
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (runner side)
        run: |
          pip install --no-cache-dir \
            mlflow-skinny \
            boto3 \
            kubernetes \
            pyyaml \
            jq

      #######################################################################
      # 2. kubectl on runner
      #######################################################################
      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: "v1.30.0"

      #######################################################################
      # 3. Build in-cluster kubeconfig from this runner pod's SA token
      #######################################################################
      - name: Build in-cluster kubeconfig
        env:
          NAMESPACE: ${{ env.NAMESPACE }}
        run: |
          set -e
          CACERT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
          API="https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}"

          kubectl config set-cluster in-cluster \
            --server="${API}" \
            --certificate-authority="${CACERT}" \
            --embed-certs=true

          kubectl config set-credentials sa --token="${SA_TOKEN}"

          kubectl config set-context in-cluster \
            --cluster=in-cluster \
            --user=sa \
            --namespace="${NAMESPACE}"

          kubectl config use-context in-cluster

      #######################################################################
      # 4. MLflow 등록 & Stage 전환
      #    - runs:/<RUN_ID>/model 을 MODEL_NAME에 등록
      #    - 해당 version을 SERVE_STAGE (ex. Production) 로 promote
      #######################################################################
      - name: Promote MLflow model/version (inline)
        env:
          MLFLOW_TRACKING_URI: ${{ env.MLFLOW_TRACKING_URI }}
          MODEL_NAME: ${{ env.MODEL_NAME }}
          RUN_ID: ${{ env.RUN_ID }}
          SERVE_STAGE: ${{ env.SERVE_STAGE }}
        run: |
          set -euo pipefail
          python - << 'PYCODE'
          import os, mlflow
          from mlflow.tracking import MlflowClient
          from mlflow.exceptions import MlflowException

          tracking_uri = os.environ["MLFLOW_TRACKING_URI"]
          model_name   = os.environ["MODEL_NAME"]
          run_id       = os.environ["RUN_ID"]
          stage        = os.environ["SERVE_STAGE"]

          mlflow.set_tracking_uri(tracking_uri)
          client = MlflowClient(tracking_uri=tracking_uri)

          model_uri = f"runs:/{run_id}/model"
          print(f"[promote] registering {model_uri} -> {model_name}")

          version_num = None

          try:
              mv = mlflow.register_model(model_uri=model_uri, name=model_name)
              version_num = mv.version
              print(f"[promote] registered new version={version_num}")
          except MlflowException as e:
              print(f"[promote] register_model exception: {e}")
              print("[promote] trying to find existing model version for this run_id ...")
              for mv in client.search_model_versions(f"name='{model_name}'"):
                  if mv.run_id == run_id:
                      version_num = mv.version
                      print(f"[promote] found existing version={version_num} for run_id")
                      break

          if version_num is None:
              all_versions = client.search_model_versions(f"name='{model_name}'")
              if all_versions:
                  all_versions.sort(key=lambda m:int(m.version), reverse=True)
                  version_num = all_versions[0].version
                  print(f"[promote] fallback using latest version={version_num}")
              else:
                  raise RuntimeError("No model version could be determined at all")

          print(f"[promote] transition v{version_num} -> stage={stage}")
          try:
              client.transition_model_version_stage(
                  name=model_name,
                  version=version_num,
                  stage=stage,
                  archive_existing_versions=False,
              )
          except MlflowException as e:
              print(f"[promote] transition warning: {e}")

          print("[promote] done.")
          PYCODE

      #######################################################################
      # 5. MLflow run 태그에서 serve용 이미지 태그 추출
      #    우선순위: ghcr.ref > (image+digest) > (image:tag)
      #######################################################################
      - name: Resolve runtime image from MLflow run tags
        id: resolve_image
        env:
          MLFLOW_TRACKING_URI: ${{ env.MLFLOW_TRACKING_URI }}
          RUN_ID: ${{ env.RUN_ID }}
        run: |
          set -euo pipefail
          python - << 'PYCODE'
          import os, sys, mlflow

          tracking_uri = os.environ["MLFLOW_TRACKING_URI"]
          run_id = os.environ["RUN_ID"]

          mlflow.set_tracking_uri(tracking_uri)
          run = mlflow.get_run(run_id)
          tags = run.data.tags or {}

          ref     = (tags.get("ghcr.ref") or "").strip()
          image   = (tags.get("ghcr.image") or "").strip()
          digest  = (tags.get("ghcr.digest") or "").strip()
          tag     = (tags.get("ghcr.tag") or "").strip()

          serve_image = ""
          reason = ""

          if ref:
              serve_image = ref
              reason = "ghcr.ref"
          elif image and digest:
              serve_image = f"{image}@{digest}"
              reason = "image+digest"
          elif image and tag:
              serve_image = f"{image}:{tag}"
              reason = "image+tag"
          else:
              serve_image = ""
              reason = "fallback-none"

          print(f"[resolve_image] RUN_ID={run_id}")
          print(f"[resolve_image] SERVE_IMAGE={serve_image} ({reason})", file=sys.stderr)

          with open(os.environ["GITHUB_ENV"], "a") as f:
              f.write(f"SERVE_IMAGE={serve_image}\n")
              f.write(f"SERVE_IMAGE_REASON={reason}\n")
          PYCODE

          echo "[info] SERVE_IMAGE=${SERVE_IMAGE} (reason=${SERVE_IMAGE_REASON})"
          if [ -z "${SERVE_IMAGE}" ]; then
            echo "::warning ::Could not resolve SERVE_IMAGE from MLflow tags; will reuse current Deployment image."
          fi

      #######################################################################
      # 6. Deployment에 env 주입
      #    - 모델/런/스테이지 정보 + MinIO/MLflow 접속 정보
      #    - 이 단계 자체도 spec.template.env를 수정하므로 rollout 트리거 재료가 된다.
      #######################################################################
      - name: Ensure serve env on Deployment
        env:
          NAMESPACE: ${{ env.NAMESPACE }}
          SERVE_DEPLOY: ${{ env.SERVE_DEPLOY }}
          MODEL_NAME: ${{ env.MODEL_NAME }}
          RUN_ID: ${{ env.RUN_ID }}
          SERVE_STAGE: ${{ env.SERVE_STAGE }}
          SERVE_PORT: ${{ env.SERVE_PORT }}
          MLFLOW_TRACKING_URI: ${{ env.MLFLOW_TRACKING_URI }}
        run: |
          set -euo pipefail
          kubectl -n "${NAMESPACE}" set env deploy/${SERVE_DEPLOY} \
            MODEL_NAME="${MODEL_NAME}" \
            RUN_ID="${RUN_ID}" \
            SERVE_STAGE="${SERVE_STAGE}" \
            SERVE_PORT="${SERVE_PORT}" \
            MLFLOW_TRACKING_URI="${MLFLOW_TRACKING_URI}" \
            MLFLOW_S3_ENDPOINT_URL="http://minio.${NAMESPACE}.svc.cluster.local:9000" \
            AWS_DEFAULT_REGION="us-east-1" \
            AWS_S3_FORCE_PATH_STYLE="true" \
            || true

      #######################################################################
      # 7. 강제로 fresh pod 만들기
      #    (a) scale 0 -> 기존 파드 제거
      #    (b) command/args/ports/resources/probes/image patch
      #    (c) template annotation 변경(workflows/restartedAt)
      #    (d) scale 1 -> 새 ReplicaSet/POD 생성
      #######################################################################
      - name: Reconcile Deployment and restart fresh pod
        env:
          NAMESPACE: ${{ env.NAMESPACE }}
          SERVE_DEPLOY: ${{ env.SERVE_DEPLOY }}
          SERVE_CONTAINER_INDEX: ${{ env.SERVE_CONTAINER_INDEX }}
          SERVE_PORT: ${{ env.SERVE_PORT }}
          MODEL_NAME: ${{ env.MODEL_NAME }}
          SERVE_STAGE: ${{ env.SERVE_STAGE }}
          SERVE_IMAGE: ${{ env.SERVE_IMAGE }}
        run: |
          set -euo pipefail

          echo "[reconcile] scale ${SERVE_DEPLOY} -> 0"
          kubectl -n "${NAMESPACE}" scale deploy "${SERVE_DEPLOY}" --replicas=0

          CMD="mlflow models serve -m models:/${MODEL_NAME}/${SERVE_STAGE} --host 0.0.0.0 --port ${SERVE_PORT} --env-manager local"
          echo "[reconcile] new CMD: ${CMD}"

          echo "[reconcile] patch command/args/ports/resources"
          kubectl -n "${NAMESPACE}" patch deploy "${SERVE_DEPLOY}" --type='json' -p="[
            {\"op\":\"replace\",\"path\":\"/spec/template/spec/containers/${SERVE_CONTAINER_INDEX}/command\",
             \"value\":[\"sh\",\"-c\"]},
            {\"op\":\"replace\",\"path\":\"/spec/template/spec/containers/${SERVE_CONTAINER_INDEX}/args\",
             \"value\":[\"${CMD}\"]},
            {\"op\":\"replace\",\"path\":\"/spec/template/spec/containers/${SERVE_CONTAINER_INDEX}/ports\",
             \"value\":[{\"containerPort\": ${SERVE_PORT}, \"name\": \"http\"}]},
            {\"op\":\"replace\",\"path\":\"/spec/template/spec/containers/${SERVE_CONTAINER_INDEX}/resources\",
             \"value\":{
               \"requests\": {\"cpu\": \"200m\", \"memory\": \"512Mi\"},
               \"limits\":   {\"cpu\": \"1\",    \"memory\": \"1Gi\"}
             }}
          ]"

          echo "[reconcile] patch startupProbe (replace -> fallback add)"
          set +e
          kubectl -n "${NAMESPACE}" patch deploy "${SERVE_DEPLOY}" --type='json' -p="[
            {\"op\":\"replace\",\"path\":\"/spec/template/spec/containers/${SERVE_CONTAINER_INDEX}/startupProbe\",
             \"value\":{
               \"httpGet\": {\"path\": \"/ping\", \"port\": \"http\"},
               \"initialDelaySeconds\": 30,
               \"periodSeconds\": 5,
               \"timeoutSeconds\": 3,
               \"failureThreshold\": 120,
               \"successThreshold\": 1
             }}
          ]"
          RC=$?
          set -e
          if [ $RC -ne 0 ]; then
            kubectl -n "${NAMESPACE}" patch deploy "${SERVE_DEPLOY}" --type='json' -p="[
              {\"op\":\"add\",\"path\":\"/spec/template/spec/containers/${SERVE_CONTAINER_INDEX}/startupProbe\",
               \"value\":{
                 \"httpGet\": {\"path\": \"/ping\", \"port\": \"http\"},
                 \"initialDelaySeconds\": 30,
                 \"periodSeconds\": 5,
                 \"timeoutSeconds\": 3,
                 \"failureThreshold\": 120,
                 \"successThreshold\": 1
               }}
            ]"
          fi

          echo "[reconcile] patch readinessProbe (replace -> fallback add)"
          set +e
          kubectl -n "${NAMESPACE}" patch deploy "${SERVE_DEPLOY}" --type='json' -p="[
            {\"op\":\"replace\",\"path\":\"/spec/template/spec/containers/${SERVE_CONTAINER_INDEX}/readinessProbe\",
             \"value\":{
               \"httpGet\": {\"path\": \"/ping\", \"port\": \"http\"},
               \"periodSeconds\": 5,
               \"timeoutSeconds\": 2,
               \"failureThreshold\": 6,
               \"successThreshold\": 1
             }}
          ]"
          RC=$?
          set -e
          if [ $RC -ne 0 ]; then
            kubectl -n "${NAMESPACE}" patch deploy "${SERVE_DEPLOY}" --type='json' -p="[
              {\"op\":\"add\",\"path\":\"/spec/template/spec/containers/${SERVE_CONTAINER_INDEX}/readinessProbe\",
               \"value\":{
                 \"httpGet\": {\"path\": \"/ping\", \"port\": \"http\"},
                 \"periodSeconds\": 5,
                 \"timeoutSeconds\": 2,
                 \"failureThreshold\": 6,
                 \"successThreshold\": 1
               }}
            ]"
          fi

          echo "[reconcile] patch livenessProbe (replace -> fallback add)"
          set +e
          kubectl -n "${NAMESPACE}" patch deploy "${SERVE_DEPLOY}" --type='json' -p="[
            {\"op\":\"replace\",\"path\":\"/spec/template/spec/containers/${SERVE_CONTAINER_INDEX}/livenessProbe\",
             \"value\":{
               \"httpGet\": {\"path\": \"/ping\", \"port\": \"http\"},
               \"initialDelaySeconds\": 60,
               \"periodSeconds\": 10,
               \"timeoutSeconds\": 2,
               \"failureThreshold\": 3,
               \"successThreshold\": 1
             }}
          ]"
          RC=$?
          set -e
          if [ $RC -ne 0 ]; then
            kubectl -n "${NAMESPACE}" patch deploy "${SERVE_DEPLOY}" --type='json' -p="[
              {\"op\":\"add\",\"path\":\"/spec/template/spec/containers/${SERVE_CONTAINER_INDEX}/livenessProbe\",
               \"value\":{
                 \"httpGet\": {\"path\": \"/ping\", \"port\": \"http\"},
                 \"initialDelaySeconds\": 60,
                 \"periodSeconds\": 10,
                 \"timeoutSeconds\": 2,
                 \"failureThreshold\": 3,
                 \"successThreshold\": 1
               }}
            ]"
          fi

          # 이미지도 바꿀 수 있으면 여기서 교체
          if [ -n "${SERVE_IMAGE}" ]; then
            echo "[reconcile] patch image -> ${SERVE_IMAGE}"
            kubectl -n "${NAMESPACE}" patch deploy "${SERVE_DEPLOY}" --type='json' -p="[
              {\"op\":\"replace\",\"path\":\"/spec/template/spec/containers/${SERVE_CONTAINER_INDEX}/image\",
               \"value\":\"${SERVE_IMAGE}\"}
            ]"
          else
            echo "::warning ::no SERVE_IMAGE resolved, keeping existing image"
          fi

          # template annotation bump -> 새로운 PodTemplateHash 유도
          TS=$(date +%s)
          echo "[reconcile] bump workflows/restartedAt=${TS}"
          set +e
          kubectl -n "${NAMESPACE}" patch deploy "${SERVE_DEPLOY}" --type='json' -p="[
            {\"op\":\"replace\",
             \"path\":\"/spec/template/metadata/annotations/workflows~1restartedAt\",
             \"value\":\"${TS}\"}
          ]"
          RC=$?
          set -e
          if [ $RC -ne 0 ]; then
            kubectl -n "${NAMESPACE}" patch deploy "${SERVE_DEPLOY}" --type='json' -p="[
              {\"op\":\"add\",
               \"path\":\"/spec/template/metadata/annotations/workflows~1restartedAt\",
               \"value\":\"${TS}\"}
            ]"
          fi

          echo "[reconcile] scale ${SERVE_DEPLOY} -> 1"
          kubectl -n "${NAMESPACE}" scale deploy "${SERVE_DEPLOY}" --replicas=1

      #######################################################################
      # 8. rollout 완료 대기 -> 새 파드 떠 있는지 출력
      #######################################################################
      - name: Wait for rollout
        env:
          NAMESPACE: ${{ env.NAMESPACE }}
          SERVE_DEPLOY: ${{ env.SERVE_DEPLOY }}
        run: |
          set -euo pipefail
          kubectl -n "${NAMESPACE}" rollout status deploy/${SERVE_DEPLOY} --timeout=300s
          echo "[done] final pods:"
          kubectl -n "${NAMESPACE}" get pods -l app=${SERVE_DEPLOY} -o wide

