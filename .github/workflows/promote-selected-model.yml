name: Promote-Selected-Model

on:
  workflow_dispatch:
    inputs:
      model_name:
        description: "MLflow model name (e.g., light-logreg)"
        required: true
        default: "light-logreg"
      run_id:
        description: "RUN_ID to promote (copy from MLflow UI)"
        required: true
      reload_method:
        description: "How to refresh serve (rollout|http)"
        required: true
        default: "rollout"

jobs:
  promote:
    runs-on: self-hosted

    env:
      # K8s
      NAMESPACE: mlops
      SERVE_DEPLOY: light-serve
      SERVE_PORT: "8000"
      SERVE_STAGE: Production        # MODEL_URI = models:/<MODEL_NAME>/<SERVE_STAGE>

      # MLflow
      MLFLOW_TRACKING_URI: http://mlflow.mlops.svc.cluster.local:5000
      MODEL_NAME: ${{ inputs.model_name }}
      RUN_ID: ${{ inputs.run_id }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps (runner side)
        run: pip install --no-cache-dir mlflow-skinny

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.30.0'

      - name: Build in-cluster kubeconfig (runner pod)
        run: |
          set -e
          CACERT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
          API="https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}"
          kubectl config set-cluster in-cluster --server="${API}" --certificate-authority="${CACERT}" --embed-certs=true
          kubectl config set-credentials sa --token="${SA_TOKEN}"
          kubectl config set-context in-cluster --cluster=in-cluster --user=sa --namespace=${NAMESPACE}
          kubectl config use-context in-cluster

      # 1) 선택된 RUN을 MLflow Registry에 반영 (promote.py는 기존 것 사용)
      - name: Promote in MLflow (runs:/<RUN_ID>/model)
        run: python promote.py

      # 2) MLflow RUN 태그에서 GHCR 이미지 결정
      #    우선순위: ghcr.ref -> image@digest -> image:tag
      - name: Resolve GHCR image from MLflow RUN tags
        id: resolve_image
        env:
          MLFLOW_TRACKING_URI: ${{ env.MLFLOW_TRACKING_URI }}
          RUN_ID: ${{ env.RUN_ID }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, sys, mlflow
          mlflow.set_tracking_uri(os.environ["MLFLOW_TRACKING_URI"])
          run = mlflow.get_run(os.environ["RUN_ID"])
          tags = run.data.tags

          ref    = (tags.get("ghcr.ref")    or "").strip()
          image  = (tags.get("ghcr.image")  or "").strip()
          digest = (tags.get("ghcr.digest") or "").strip()
          tag    = (tags.get("ghcr.tag")    or "").strip()

          if ref:
              out, reason = ref, "ghcr.ref"
          elif image and digest:
              out, reason = f"{image}@{digest}", "image+digest"
          elif image and tag:
              out, reason = f"{image}:{tag}", "image+tag"
          else:
              out, reason = "", "fallback-none"

          print(f"[resolve_image] SERVE_IMAGE={out} reason={reason}", file=sys.stderr)

          with open(os.environ["GITHUB_ENV"], "a") as f:
              f.write(f"SERVE_IMAGE={out}\n")
              f.write(f"SERVE_IMAGE_REASON={reason}\n")
          PY

          if [ -z "${SERVE_IMAGE}" ]; then
            echo "::warning ::Could not resolve GHCR image for RUN_ID=${RUN_ID} from MLflow tags. We'll keep current image."
          else
            echo "Using SERVE_IMAGE=${SERVE_IMAGE} (source=${SERVE_IMAGE_REASON})"
          fi

      # 3) Deployment를 한 방에 표준 형태로 재정의 (전략적 머지 패치)
      #    - replicas=1
      #    - container name=server 의 command/args 를 mlflow models serve ... 으로 고정
      #    - /ping 프로브 구성
      #    - 포트 이름 http 추가
      #    - 리소스 한도 상향
      #    - env 주입 (TRACKING_URI, MODEL_URI, MinIO 설정 등)
      - name: Normalize serve Deployment spec
        run: |
          set -euo pipefail
          NS="${NAMESPACE}"
          DEPLOY="${SERVE_DEPLOY}"
          PORT="${SERVE_PORT}"
          MODEL_URI_VALUE="models:/${MODEL_NAME}/${SERVE_STAGE}"

          kubectl -n "${NS}" patch deploy "${DEPLOY}" -p "{
            \"spec\": {
              \"replicas\": 1,
              \"template\": {
                \"spec\": {
                  \"containers\": [
                    {
                      \"name\": \"server\",
                      \"command\": [\"mlflow\"],
                      \"args\": [
                        \"models\",\"serve\",
                        \"-m\",\"$(MODEL_URI)\",
                        \"--host\",\"0.0.0.0\",
                        \"--port\",\"${PORT}\",
                        \"--env-manager\",\"local\"
                      ],
                      \"ports\": [
                        {\"containerPort\": ${PORT}, \"name\": \"http\"}
                      ],
                      \"startupProbe\": {
                        \"httpGet\": {\"path\": \"/ping\", \"port\": \"http\"},
                        \"initialDelaySeconds\": 30,
                        \"periodSeconds\": 5,
                        \"timeoutSeconds\": 3,
                        \"failureThreshold\": 120
                      },
                      \"readinessProbe\": {
                        \"httpGet\": {\"path\": \"/ping\", \"port\": \"http\"},
                        \"periodSeconds\": 5,
                        \"timeoutSeconds\": 2,
                        \"failureThreshold\": 6
                      },
                      \"livenessProbe\": {
                        \"httpGet\": {\"path\": \"/ping\", \"port\": \"http\"},
                        \"initialDelaySeconds\": 60,
                        \"periodSeconds\": 10,
                        \"timeoutSeconds\": 2,
                        \"failureThreshold\": 3
                      },
                      \"resources\": {
                        \"requests\": {\"cpu\": \"200m\", \"memory\": \"512Mi\"},
                        \"limits\":   {\"cpu\": \"1\",    \"memory\": \"1Gi\"}
                      },
                      \"env\": [
                        {\"name\": \"MLFLOW_TRACKING_URI\",     \"value\": \"http://mlflow.${NS}.svc.cluster.local:5000\"},
                        {\"name\": \"MODEL_URI\",               \"value\": \"${MODEL_URI_VALUE}\"},
                        {\"name\": \"MLFLOW_S3_ENDPOINT_URL\",  \"value\": \"http://minio.${NS}.svc.cluster.local:9000\"},
                        {\"name\": \"AWS_DEFAULT_REGION\",      \"value\": \"us-east-1\"},
                        {\"name\": \"AWS_S3_FORCE_PATH_STYLE\", \"value\": \"true\"}
                      ]
                    }
                  ]
                }
              }
            }
          }"

          echo "=== Deployment after normalize ==="
          kubectl -n "${NS}" get deploy "${DEPLOY}" -o yaml | sed -n '1,200p'

      # 4) MLflow 태그에서 결정된 GHCR 이미지를 deployment 컨테이너에 적용
      - name: Patch serve image (from MLflow RUN tags)
        if: ${{ env.SERVE_IMAGE != '' }}
        run: |
          set -euo pipefail
          NS="${NAMESPACE}"
          DEPLOY="${SERVE_DEPLOY}"

          kubectl -n "${NS}" patch deploy "${DEPLOY}" -p "{
            \"spec\": {
              \"template\": {
                \"spec\": {
                  \"containers\": [
                    {
                      \"name\": \"server\",
                      \"image\": \"${SERVE_IMAGE}\"
                    }
                  ]
                }
              }
            }
          }"

          echo "Patched image to ${SERVE_IMAGE}"

      # 5) 새 ReplicaSet 강제 생성 (annotation bump로 pod 교체 보장)
      - name: Force template bump
        run: |
          set -e
          NS="${NAMESPACE}"
          DEPLOY="${SERVE_DEPLOY}"
          TS=$(date +%s)
          kubectl -n "${NS}" patch deploy "${DEPLOY}" -p "{
            \"spec\": {
              \"template\": {
                \"metadata\": {
                  \"annotations\": {
                    \"workflows/restartedAt\": \"${TS}\",
                    \"workflows/run-id\": \"${{ github.run_id }}\"
                  }
                }
              }
            }
          }"
          kubectl -n "${NS}" get deploy "${DEPLOY}" -o wide

      # 6) rollout 진행 / 상태 덤프
      - name: Rollout restart serve
        if: ${{ inputs.reload_method == 'rollout' || env.SERVE_IMAGE != '' }}
        run: |
          set -e
          NS="${NAMESPACE}"
          DEPLOY="${SERVE_DEPLOY}"

          # rollout restart 는 실패해도 continue해도 되지만 상태를 계속 보자
          kubectl -n "${NS}" rollout restart deploy/${DEPLOY} || true

          echo "=== Deployment ==="
          kubectl -n "${NS}" get deploy ${DEPLOY} -o wide

          echo "=== ReplicaSets ==="
          kubectl -n "${NS}" get rs -l app=${DEPLOY} -o wide || true

          echo "=== Pods (before wait) ==="
          kubectl -n "${NS}" get pods -l app=${DEPLOY} -o wide || true

          kubectl -n "${NS}" rollout status deploy/${DEPLOY} --timeout=600s || true

          echo "=== Pods (after wait) ==="
          kubectl -n "${NS}" get pods -l app=${DEPLOY} -o wide || true

      # 7) (옵션) HTTP 핫 리로드가 있는 경우만
      - name: Call /reload on light-serve (HTTP) [optional]
        if: ${{ inputs.reload_method == 'http' }}
        run: |
          curl -s -X POST http://${{ env.SERVE_DEPLOY }}.${{ env.NAMESPACE }}.svc.cluster.local:${{ env.SERVE_PORT }}/reload || true

