name: Train on Runner → Log to MLflow

on:
  push:
    paths:
      - "ml/train.py"
      - ".github/workflows/train.yml"
  workflow_dispatch:

concurrency:
  group: train-mlflow
  cancel-in-progress: true

jobs:
  train:
    runs-on: [self-hosted, linux, x64]

    env:
      # ── MLflow / MinIO 접속(클러스터 내부 DNS 사용)
      MLFLOW_TRACKING_URI: http://mlflow.mlops.svc.cluster.local:5000
      MLFLOW_S3_ENDPOINT_URL: http://minio.mlops.svc.cluster.local:9000
      MLFLOW_EXPERIMENT_NAME: iris-rf
      AWS_S3_FORCE_PATH_STYLE: "true"
      AWS_DEFAULT_REGION: us-east-1

      # ── MinIO 자격증명 (리포 Secrets에 저장)
      AWS_ACCESS_KEY_ID: ${{ secrets.MINIO_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.MINIO_SECRET_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # seaborn/matplotlib 포함 (train.py에서 시각화 사용)
          pip install mlflow scikit-learn numpy pandas boto3 matplotlib seaborn

      - name: Sanity check (MLflow/MinIO reachability)
        run: |
          python - << 'PY'
          import os, urllib.request
          urls = [
            os.environ['MLFLOW_TRACKING_URI'] + "/api/2.0/mlflow/experiments/list",
            os.environ['MLFLOW_S3_ENDPOINT_URL']
          ]
          for u in urls:
              try:
                  with urllib.request.urlopen(u, timeout=8) as r:
                      print("OK:", u, r.status)
              except Exception as e:
                  print("ERROR:", u, repr(e))
          PY

      - name: Run training
        working-directory: ml
        run: python -u train.py

      - name: Done
        run: echo "✅ Training finished; check MLflow UI for new run/artifacts."

